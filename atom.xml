<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WuYJ&#39;s Blog</title>
  
  <subtitle>HELLO WORLD</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyujie.top/"/>
  <updated>2019-04-03T12:56:21.693Z</updated>
  <id>http://wuyujie.top/</id>
  
  <author>
    <name>Wuyunjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode--12. Integer to Roman</title>
    <link href="http://wuyujie.top/2019/04/03/LeetCode-12-Integer-to-Roman/"/>
    <id>http://wuyujie.top/2019/04/03/LeetCode-12-Integer-to-Roman/</id>
    <published>2019-04-03T12:29:16.000Z</published>
    <updated>2019-04-03T12:56:21.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Symbol       Value</div><div class="line">I             1</div><div class="line">V             5</div><div class="line">X             10</div><div class="line">L             50</div><div class="line">C             100</div><div class="line">D             500</div><div class="line">M             1000</div></pre></td></tr></table></figure></p><p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><ul><li>I can be placed before V (5) and X (10) to make 4 and 9. </li><li>X can be placed before L (50) and C (100) to make 40 and 90. </li><li>C can be placed before D (500) and M (1000) to make 400 and 900.</li></ul><p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: 3<br>Output: “III”</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: 4<br>Output: “IV”</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: 9<br>Output: “IX”</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input: 58<br>Output: “LVIII”<br>Explanation: L = 50, V = 5, III = 3.</p></blockquote><p><strong>Example 5:</strong></p><blockquote><p>Input: 1994<br>Output: “MCMXCIV”<br>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目描述很长，但意思很简单，就是将普通的阿拉伯数字转换为罗马数字。罗马数字有自己的表示规则，所以需要进行一定处理。其实处理方法很简单：</p><blockquote><p>每次找到数字中包含的最大罗马数字，然后减去这个数，并把该罗马数加入表示数的字符串中。不断重复这个过程，直到数字为0停止，输出结果。</p></blockquote><p>最开始实现时，写了一长串的if-else语句，尽管能够成功解决。但是代码不够简洁，需要想办法使代码美观规范。可以将这些罗马数字和其对应的阿拉伯数字从大到小存放到数组或者map中，之后直接从大到小遍历这个数组即可，可以省去大部分if-else语句，且结构更加清晰。</p><p>评论区有另一种解法，直接把0~10,10~100,100~1000,1000~3999范围类，罗马数的可能表示直接列出来放到一个数字中，然后直接按位查表，O(1)的时间复杂度。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; val&#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str&#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.size(); ++i) &#123;</div><div class="line">            <span class="keyword">while</span> (num &gt;= val[i]) &#123;</div><div class="line">                num -= val[i];</div><div class="line">                res += str[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="built_in">string</span> THOUS[];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="built_in">string</span> HUNDS[];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="built_in">string</span> TENS[];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="built_in">string</span> ONES[];</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        result += THOUS[(<span class="keyword">int</span>)(num/<span class="number">1000</span>)%<span class="number">10</span>];</div><div class="line">        result += HUNDS[(<span class="keyword">int</span>)(num/<span class="number">100</span>)%<span class="number">10</span>];</div><div class="line">        result += TENS[(<span class="keyword">int</span>)(num/<span class="number">10</span>)%<span class="number">10</span>];</div><div class="line">        result += ONES[num%<span class="number">10</span>];</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> Solution::THOUS[]= &#123;<span class="string">""</span>,<span class="string">"M"</span>,<span class="string">"MM"</span>,<span class="string">"MMM"</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> Solution::HUNDS[]= &#123;<span class="string">""</span>,<span class="string">"C"</span>,<span class="string">"CC"</span>,<span class="string">"CCC"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"DC"</span>,<span class="string">"DCC"</span>,<span class="string">"DCCC"</span>,<span class="string">"CM"</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> Solution::TENS[]= &#123;<span class="string">""</span>,<span class="string">"X"</span>,<span class="string">"XX"</span>,<span class="string">"XXX"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"LX"</span>,<span class="string">"LXX"</span>,<span class="string">"LXXX"</span>,<span class="string">"XC"</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> Solution::ONES[]= &#123;<span class="string">""</span>,<span class="string">"I"</span>,<span class="string">"II"</span>,<span class="string">"III"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"VI"</span>,<span class="string">"VII"</span>,<span class="string">"VIII"</span>,<span class="string">"IX"</span>&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--11. Container With Most Water</title>
    <link href="http://wuyujie.top/2019/04/03/LeetCode-11-Container-With-Most-Water/"/>
    <id>http://wuyujie.top/2019/04/03/LeetCode-11-Container-With-Most-Water/</id>
    <published>2019-04-03T12:16:07.000Z</published>
    <updated>2019-04-03T12:24:53.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given n non-negative integers <strong>a1, a2, …, an</strong> , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.<br><a id="more"></a></p></blockquote><p><strong>Note:</strong> You may not slant the container and n is at least 2.</p><p><img src="https://i.niupic.com/images/2019/04/03/5Ujc.jpg" alt=""><br>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><p><strong>Example :</strong></p><blockquote><p>Input: [1,8,6,2,5,4,8,3,7]<br>Output: 49</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>首先想到的是暴力解法，直接遍历所有可能的二元组，最终可以找到满足题目要求的最大值。但是题目对时间有要求，这种时间复杂度O(n^2)的方法超时了。所以需要使用更优的方法，一种优化的方法思路如下：</p><blockquote><p>使用两个变量，一个表示底的开始，一个表示底的终点。一开始底的起点是数组第一位，终点是数组最后一位。这样去计算两者之间围成的区域，如果比当前记录的最大区域大，则将之记为最大区域值。之后，将两边中较短的一边向中间移动一个单位，再次计算区域大小，重复刚才的后续过程。<br>这里的难点是为什么移动的是两边中较小的一条呢？因为这条是这个区域增加的“短板“。移动较短的一边，也许会遇到一条更大的边，这样的话这种增加有可能抵消了底边的变短，甚至可能使得区域面积变得更大。相反的，如果移动的是较大的一边，最好的情况是遇到一条比较短边还要长的边，但是因为“木桶效应“，整个区域大小还是取决于较短的边，所以移动较长的一边是不可能得到更好的结果的。</p></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=height.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> maxArea = min(height[i],height[j])*j;</div><div class="line">        <span class="keyword">while</span>(i&lt;j)</div><div class="line">        &#123;</div><div class="line">            maxArea = max(maxArea,min(height[i],height[j])*(j-i));</div><div class="line">            <span class="keyword">if</span>(height[i]&lt;height[j]) i++;</div><div class="line">            <span class="keyword">else</span> j--;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> maxArea;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given n non-negative integers &lt;strong&gt;a1, a2, …, an&lt;/strong&gt; , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>第二周LeetCode</title>
    <link href="http://wuyujie.top/2019/04/03/%E7%AC%AC%E4%BA%8C%E5%91%A8LeetCode/"/>
    <id>http://wuyujie.top/2019/04/03/第二周LeetCode/</id>
    <published>2019-04-03T12:05:37.000Z</published>
    <updated>2019-04-03T12:13:12.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二周LeetCode刷题记录"><a href="#第二周LeetCode刷题记录" class="headerlink" title="第二周LeetCode刷题记录"></a>第二周LeetCode刷题记录</h2><a id="more"></a><ol><li><a href="http://wuyunjie.top/2019/03/31/LeetCode-4-Median-of-Two-Sorted-Arrays/" title="LeetCode--4. Median of Two Sorted Arrays" target="_blank" rel="external">LeetCode–4. Median of Two Sorted Arrays</a></li><li><a href="http://wuyunjie.top/2019/03/28/LeetCode%E2%80%94%E2%80%945-Longest-Palindromic-Substring/" title="LeetCode——5. Longest Palindromic Substring" target="_blank" rel="external">LeetCode–5. Longest Palindromic Substring</a></li><li><a href="http://wuyunjie.top/2019/04/01/LeetCode%E2%80%94%E2%80%946-ZigZag-Conversion/" title="LeetCode——6. ZigZag Conversion" target="_blank" rel="external">LeetCode–6. ZigZag Conversion</a></li><li><a href="http://wuyunjie.top/2019/03/31/LeetCode-8-String-to-Integer-atoi/" title="LeetCode--8. String to Integer (atoi)" target="_blank" rel="external">LeetCode–8. String to Integer (atoi)</a></li><li><a href="http://wuyunjie.top/2019/04/02/LeetCode-9-Palindrome-Number/" title="LeetCode--9. Palindrome Number" target="_blank" rel="external">LeetCode–9. Palindrome Number</a></li><li></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第二周LeetCode刷题记录&quot;&gt;&lt;a href=&quot;#第二周LeetCode刷题记录&quot; class=&quot;headerlink&quot; title=&quot;第二周LeetCode刷题记录&quot;&gt;&lt;/a&gt;第二周LeetCode刷题记录&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode--9. Palindrome Number</title>
    <link href="http://wuyujie.top/2019/04/02/LeetCode-9-Palindrome-Number/"/>
    <id>http://wuyujie.top/2019/04/02/LeetCode-9-Palindrome-Number/</id>
    <published>2019-04-02T05:16:53.000Z</published>
    <updated>2019-04-02T05:57:22.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.<br><a id="more"></a></p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: 121<br>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: -121<br>Output: false<br>Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: 10<br>Output: false<br>Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目让判断一个数整数是不是一个回文，其中定义所有负数都不是回文。解题想法是</p><blockquote><ol><li>首先判断这个数是不是负数，或者是不是0~9的数(只有一位肯定是回文)。</li><li>然后将数字转化为一个字符串，从中心开始向两边扩展判断是不是回文。</li></ol></blockquote><p>这里判断回文的思路和前面做到的一道题很类似，但是这个题要更简单一点。后来才发现题目要求里面有，<strong>不能使用把数转化为字符串</strong>。<br>前面有道题是可以把一个数反转，那么可以直接把数反转后，看看两个数是否相等即可判断。但是把数反转后有可能导致数字大于int表示范围，还需要额外处理溢出的情况。一种优化的方法是，可以<strong>只反转int数字的一半</strong>，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。例如，输入 1221，我们可以将数字“1221”的后半部分从“21”反转为“12”，并将其与前半部分“12”进行比较，因为二者相同，我们得知数字 1221 是回文。这里还需要对一些特殊情况进行处理，比如数字是奇数长，或者10^n时，需要额外判断。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="转化为字符串的解法"><a href="#转化为字符串的解法" class="headerlink" title="转化为字符串的解法"></a>转化为字符串的解法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToStr</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123; </div><div class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> tmp = (x%<span class="number">10</span>)+<span class="string">'0'</span>;</div><div class="line">            res = tmp + res;</div><div class="line">            x=x/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;x&lt;<span class="number">10</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> num = intToStr(x);</div><div class="line">        <span class="keyword">int</span> i,j;</div><div class="line">        <span class="keyword">if</span>(num.length()%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            i=num.length()/<span class="number">2</span><span class="number">-1</span>;</div><div class="line">            j=num.length()/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            i=num.length()/<span class="number">2</span><span class="number">-1</span>;</div><div class="line">            j=num.length()/<span class="number">2</span>+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;j&lt;=num.length())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(num[i]!=num[j]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            i--;j++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="不转化解法"><a href="#不转化解法" class="headerlink" title="不转化解法"></a>不转化解法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || (x!=<span class="number">0</span> &amp;&amp; x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> revertedNumber = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(x &gt; revertedNumber)</div><div class="line">        &#123;</div><div class="line">            revertedNumber = revertedNumber*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">            x/=<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> x==(revertedNumber/<span class="number">10</span>) || x==revertedNumber;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——6. ZigZag Conversion</title>
    <link href="http://wuyujie.top/2019/04/01/LeetCode%E2%80%94%E2%80%946-ZigZag-Conversion/"/>
    <id>http://wuyujie.top/2019/04/01/LeetCode——6-ZigZag-Conversion/</id>
    <published>2019-04-01T06:13:17.000Z</published>
    <updated>2019-04-01T06:56:34.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure></p><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code><br>Write the code that will take a string and make this conversion given a number of rows:<br><code>string convert(string s, int numRows);</code></p></blockquote><p><strong>Example1:</strong></p><blockquote><p>Input: s = “PAYPALISHIRING”, numRows = 3<br>Output: “PAHNAPLSIIGYIR”</p></blockquote><p><strong>Example1:</strong></p><blockquote><p>Input: s = “PAYPALISHIRING”, numRows = 4<br>Output: “PINALSIGYAHRPI”<br>Explanation:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">P     I    N</div><div class="line">A   L S  I G</div><div class="line">Y A   H R</div><div class="line">P     I</div></pre></td></tr></table></figure></p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题可以直接通过找规律实现。找到每行 Z 字形图案字符在原字符串中对于的位置即可，然后逐行访问。规律如下：</p><blockquote><p>对于所有整数”k”,</p><ol><li>第0行中的字符位于原字符串 k*(2⋅numRows−2) 处;</li><li>第(numRows−1)行中的字符位于原字符串 k*(2⋅numRows−2)+numRows−1 处;</li><li>其他行中字符位于原字符串 k*(2⋅numRows−2)+i 以及 (k+1)*(2⋅numRows−2)−i处；</li></ol></blockquote><p>找到规律后，就很容易实现了。</p><p>另外一种方法是，通过从左向右迭代字符串，我们可以轻松地确定字符位于 Z 字形图案中的哪一行。所以可以分别构建每行的字符串，最后再将这些字符串连接起来即可，算法如下</p><blockquote><ol><li>使用 min(numRows,len(s)) 个列表来表示 Z 字形图案中的非空行。</li><li>从左到右迭代 s，将每个字符添加到合适的行。</li><li>合并所有行</li></ol></blockquote><p>但是这种方法效率要低一些。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-找规律的方法"><a href="#1-找规律的方法" class="headerlink" title="1. 找规律的方法"></a>1. 找规律的方法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="comment">//只有一行，无需处理直接输出</span></div><div class="line">        <span class="keyword">if</span>(numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> cvStr;</div><div class="line">        <span class="keyword">int</span> step=numRows*<span class="number">2</span><span class="number">-2</span>;<span class="comment">//每次前进的步伐</span></div><div class="line">        <span class="comment">//逐行生成每行的序列</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numRows;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j+i&lt;s.length();j+=step)</div><div class="line">            &#123;</div><div class="line">                cvStr+=s[j+i];</div><div class="line">                <span class="comment">//若是内部行，需要加上((k+1)(2⋅numRows−2)−i)处的字符</span></div><div class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>&amp;&amp;i!=numRows<span class="number">-1</span>&amp;&amp;j+step-i&lt;s.length())</div><div class="line">                &#123;</div><div class="line">                    cvStr+=s[j+step-i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cvStr;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="2-逐行构造的方法"><a href="#2-逐行构造的方法" class="headerlink" title="2. 逐行构造的方法"></a>2. 逐行构造的方法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="comment">//只有一行，无需处理直接输出</span></div><div class="line">        <span class="keyword">if</span>(numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> len = min(numRows,<span class="keyword">int</span>(s.length()));</div><div class="line">        <span class="built_in">string</span> cvStr; <span class="comment">//结果字符串</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; rows(len); <span class="comment">//每行字符串</span></div><div class="line">        </div><div class="line">        <span class="keyword">int</span> curRow=<span class="number">0</span>; <span class="comment">//当前行</span></div><div class="line">        <span class="keyword">bool</span> curDirect=<span class="literal">false</span>; <span class="comment">//当前方向</span></div><div class="line">        </div><div class="line">        <span class="comment">//逐个字符串构建每行</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            rows[curRow]+=s[i];</div><div class="line">            </div><div class="line">            <span class="comment">//边界时，确定当前方向</span></div><div class="line">            <span class="keyword">if</span>(curRow==<span class="number">0</span> || curRow == numRows<span class="number">-1</span>) curDirect=!curDirect;</div><div class="line">            </div><div class="line">            curRow+=curDirect?<span class="number">1</span>:<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//合成字符串</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">string</span> row : rows) cvStr+=row;</div><div class="line">        <span class="keyword">return</span> cvStr;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The string &lt;code&gt;&amp;quot;PAYPALISHIRING&amp;quot;&lt;/code&gt; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--8. String to Integer (atoi)</title>
    <link href="http://wuyujie.top/2019/03/31/LeetCode-8-String-to-Integer-atoi/"/>
    <id>http://wuyujie.top/2019/03/31/LeetCode-8-String-to-Integer-atoi/</id>
    <published>2019-03-31T09:23:46.000Z</published>
    <updated>2019-04-01T06:20:13.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Implement <strong>atoi</strong> which converts a string to an integer.<br><a id="more"></a><br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p><p>If no valid conversion could be performed, a zero value is returned.</p></blockquote><p><strong>Note:</strong></p><ul><li>Only the space character ‘ ‘ is considered as whitespace character.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.</li></ul><p><strong>Example1:</strong></p><blockquote><p>Input: “42”<br>Output: 42</p></blockquote><p><strong>Example2:</strong></p><blockquote><p>Input: “   -42”<br>Output: -42<br>Explanation: The first non-whitespace character is ‘-‘, which is the minus sign.Then take as many numerical digits as possible, which gets 42.</p></blockquote><p><strong>Example3:</strong></p><blockquote><p>Input: “4193 with words”<br>Output: 4193<br>Explanation: Conversion stops at digit ‘3’ as the next character is not a numerical digit.</p></blockquote><p><strong>Example4:</strong></p><blockquote><p>Input: “words and 987”<br>Output: 0<br>Explanation: The first non-whitespace character is ‘w’, which is not a numerical digit or a +/- sign. Therefore no valid conversion could be performed.</p></blockquote><p><strong>Example5:</strong></p><blockquote><p>Input: “-91283472332”<br>Output: -2147483648<br>Explanation: The number “-91283472332” is out of the range of a 32-bit signed integer. Thefore INT_MIN (−231) is returned.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目大致意思是：将一个字符串转换成一个数，这个字符串有很多种情况需要考虑：</p><ol><li>忽略字符串头部的空白(只把” “当做空白)</li><li>数字可能带正负号</li><li>若数字超过INT表示范围，则若上溢，返回INT最大值；若下溢，返回INT最小值</li><li>如果除1,2情况外，第一个字符不是数字，视为无效值，返回0</li><li>如果数字后出现非数字，则截断，不考虑后面的字符。</li></ol><p>所以，只需要将这些情况考虑进来，把字符串进行直接处理即可。判断溢出时，可以用long来保存结果，最后再判断值是否溢出；也可以直接计算过程中对INT进行判断。这里用的后一种方法。这道题在判断溢出时，思路类似于[7.Reverse Integer]这道题。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i,sign=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">//去空格</span></div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;str[i]==<span class="string">' '</span>;i++);</div><div class="line">        <span class="comment">//取符号</span></div><div class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'-'</span>)</div><div class="line">        &#123;</div><div class="line">            sign=<span class="number">1</span>;i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">'+'</span>)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sign==<span class="number">0</span>&amp;&amp;(INT_MAX-(str[i]-<span class="string">'0'</span>))/<span class="number">10</span>&lt;result) <span class="keyword">return</span> INT_MAX;</div><div class="line">            <span class="keyword">if</span>(sign==<span class="number">1</span>&amp;&amp;(INT_MAX-(str[i]-<span class="string">'0'</span>))/<span class="number">10</span>&lt;result) <span class="keyword">return</span> INT_MIN;</div><div class="line">            </div><div class="line">            result=result*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(sign) result=-result;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Implement &lt;strong&gt;atoi&lt;/strong&gt; which converts a string to an integer.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--4. Median of Two Sorted Arrays</title>
    <link href="http://wuyujie.top/2019/03/31/LeetCode-4-Median-of-Two-Sorted-Arrays/"/>
    <id>http://wuyujie.top/2019/03/31/LeetCode-4-Median-of-Two-Sorted-Arrays/</id>
    <published>2019-03-31T06:57:07.000Z</published>
    <updated>2019-03-31T08:36:30.761Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.<br><a id="more"></a><br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p></blockquote><p><strong>Example1:</strong></p><blockquote><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>The median is 2.0</p></blockquote><p><strong>Example2:</strong></p><blockquote><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>The median is (2 + 3)/2 = 2.5</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>最先想到的方法是，既然两个数组是有序的，可以直接归并两个数组，之后可以直接找到中位数。但题目对时间有要求，这种方法的时间复杂度是O(m+n)，比要求的O(log(m+n))显然要大，所以不能用这种暴力的方法。</p><p>仔细分析问题，既然两个数组都是有序的，那么可以不必将数组归并，可以直接挨个比较两个数组，找到中间的那两个数(数组为奇数长度下，找中间一个数)，就可以停止下来，不必继续比较后面的值，可以节省大量时间。事实证明这种方法可行，速度也够快。</p><p><strong>二分求解</strong><br>题目解析给出了另外一种方法，即基于二分搜索的方法。大致思想如下</p><blockquote><p>将数组A,B分别分成两部分，将 left_A 和 left_B 放入一个集合，并将 right_A 和 right_B 放入另一个集合。 再把这两个新的集合分别命名为 left_part 和 right_part：</p></blockquote><table><thead><tr><th style="text-align:center">left_part</th><th style="text-align:center">right_part</th></tr></thead><tbody><tr><td style="text-align:center">A[0], A[1], …, A[i-1]</td><td style="text-align:center">A[i], A[i+1], …, A[m-1]</td></tr><tr><td style="text-align:center">B[0], B[1], …, B[j-1]</td><td style="text-align:center">B[j], B[j+1], …, B[n-1]</td></tr></tbody></table><p>如果我们可以确认：</p><blockquote><ol><li>len(left_part) = len(right_part)</li><li>max(left_part) ≤ min(right_part)</li></ol></blockquote><p>那么，我们已经将 {A,B} 中的所有元素划分为相同长度的两个部分，且其中一部分中的元素总是大于另一部分中的元素。这时可以很容易求出<strong>median</strong>:</p><blockquote><p>median= (max(left_part) + min(right_part)) / 2</p></blockquote><p>要确保这两个条件，我们只需要保证：</p><blockquote><ol><li>i + j = m − i + n − j（或：m - i + n - j + 1） 如果 n ≥ m，只需要使 i = 0 ~ m, j = (m + n + 1) / 2 - i</li><li>B[j−1] ≤ A[i] 以及 A[i−1] ≤ B[j]</li></ol></blockquote><p>接下来，按照以下步骤进行二叉树搜索，找到合适的i：</p><blockquote><ol><li>设 imin = 0，imax = m, 然后开始在 [imin,imax] 中进行搜索。</li><li>令i = (imin+imax)/2, j = (m+n+1)/2-i</li><li>现在有len(left_part)=len(right_part)。会遇到三种情况：<ul><li>B[j−1] ≤ A[i] 且 A[i−1] ≤ B[j]：这意味着我们找到了目标对象 i，所以可以停止搜索。</li><li>B[j−1] &gt; A[i]：这意味着 A[i] 太小，我们必须增大 i 以使 B[j−1] ≤ A[i]。也就是说，我们必须将搜索范围调整为[i+1,imax]。因此，设 imin=i+1，并转到步骤 2。</li><li>A[i−1] &gt; B[j]：这意味着 A[i−1] 太大，我们必须减小 i 以使 A[i−1] ≤ B[j]。也就是说，我们必须将搜索范围调整为[imin,i−1]。因此，设 imax=i−1，并转到步骤 2。</li></ul></li></ol></blockquote><p>当找到目标对象 i 时，中位数为：</p><blockquote><ul><li>max(A[i−1],B[j−1]),  当 m+n 为奇数时</li><li>(max(A[i−1],B[j−1])+min(A[i],B[j]))/2,  当 m+n 为偶数时</li></ul></blockquote><p>接下来只需要对一些边界条件进行处理就可以了，这种方法实现了O(log(m+n))的复杂度</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-解法1"><a href="#1-解法1" class="headerlink" title="1.解法1"></a>1.解法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">//只有单个数组有值的情况，只需要处理单个数组</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findSingleArrayMedian</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> isOdd)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(isOdd) <span class="keyword">return</span> nums[nums.size()/<span class="number">2</span>];</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> (nums[nums.size()/<span class="number">2</span><span class="number">-1</span>] + nums[nums.size()/<span class="number">2</span>]) / <span class="number">2.0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</div><div class="line">        <span class="comment">//vector&lt;int&gt; nums;</span></div><div class="line">        <span class="keyword">int</span> totalLen=nums1.size() + nums2.size();</div><div class="line">        <span class="keyword">int</span> isOdd = (totalLen&amp;<span class="number">1</span>); <span class="comment">//判断数组长度奇偶性</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(totalLen == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(nums1.size() == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> findSingleArrayMedian(nums2,isOdd);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(nums2.size() == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> findSingleArrayMedian(nums1,isOdd);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> last1=<span class="number">0</span>,last2=<span class="number">0</span>; <span class="comment">//记录最后两个值</span></div><div class="line">        <span class="keyword">int</span> index1=<span class="number">0</span>,index2=<span class="number">0</span>; <span class="comment">//记录两个数组当前的位置</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=totalLen/<span class="number">2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//数组1已经没有值时</span></div><div class="line">            <span class="keyword">if</span>(index1 == nums1.size())</div><div class="line">            &#123;</div><div class="line">                last1=last2;</div><div class="line">                last2=nums2[index2];</div><div class="line">                <span class="comment">//nums.push_back(nums2[index2]);</span></div><div class="line">                index2++;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//数组2已经没有值时</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(index2 == nums2.size())</div><div class="line">            &#123;</div><div class="line">                last1=last2;</div><div class="line">                last2=nums1[index1];</div><div class="line">                <span class="comment">//nums.push_back(nums1[index1]);</span></div><div class="line">                index1++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums1[index1]&lt;nums2[index2])</div><div class="line">                &#123;</div><div class="line">                    last1=last2;</div><div class="line">                    last2=nums1[index1];</div><div class="line">                    <span class="comment">//nums.push_back(nums1[index1]);</span></div><div class="line">                    index1++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> </div><div class="line">                &#123;</div><div class="line">                    last1=last2;</div><div class="line">                    last2=nums2[index2];</div><div class="line">                    <span class="comment">//nums.push_back(nums2[index2]);</span></div><div class="line">                    index2++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(isOdd) <span class="keyword">return</span> last2;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> (last1+last2) / <span class="number">2.0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="2-解法2（二分法）"><a href="#2-解法2（二分法）" class="headerlink" title="2.解法2（二分法）"></a>2.解法2（二分法）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len1 = nums1.size();</div><div class="line">        <span class="keyword">int</span> len2 = nums2.size();</div><div class="line">        </div><div class="line">        <span class="comment">//确保数组1长度不大于数组2小</span></div><div class="line">        <span class="keyword">if</span>(len1 &gt; len2)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp=nums1;nums1=nums2;nums2=tmp;</div><div class="line">            <span class="keyword">int</span> temp = len1;len1=len2;len2=temp;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> iMin=<span class="number">0</span>,iMax=len1,halfLen=(len1+len2+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(iMin&lt;=iMax)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i=(iMin+iMax)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> j=halfLen-i;</div><div class="line">            </div><div class="line">            <span class="comment">//i过小</span></div><div class="line">            <span class="keyword">if</span>(i&lt;iMax &amp;&amp; nums2[j<span class="number">-1</span>]&gt;nums1[i])</div><div class="line">            &#123; </div><div class="line">                iMin=i+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//i过大</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;iMin &amp;&amp; nums1[i<span class="number">-1</span>]&gt;nums2[j])</div><div class="line">            &#123;</div><div class="line">                iMax=i<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//成功找到i</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> maxLeft=<span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>) maxLeft=nums2[j<span class="number">-1</span>];</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) maxLeft=nums1[i<span class="number">-1</span>];</div><div class="line">                <span class="keyword">else</span> maxLeft=max(nums1[i<span class="number">-1</span>],nums2[j<span class="number">-1</span>]);</div><div class="line">                <span class="keyword">if</span>((len1+len2)%<span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> maxLeft;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> minRight=<span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>(i==len1) minRight = nums2[j];</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==len2) minRight = nums1[i];</div><div class="line">                <span class="keyword">else</span> minRight=min(nums1[i],nums2[j]);</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> (maxLeft + minRight) / <span class="number">2.0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;There are two sorted arrays &lt;strong&gt;nums1&lt;/strong&gt; and &lt;strong&gt;nums2&lt;/strong&gt; of size m and n respectively.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>第一周LeetCode</title>
    <link href="http://wuyujie.top/2019/03/28/%E7%AC%AC%E4%B8%80%E5%91%A8LeetCode/"/>
    <id>http://wuyujie.top/2019/03/28/第一周LeetCode/</id>
    <published>2019-03-28T10:42:20.000Z</published>
    <updated>2019-03-31T07:40:02.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一周LeetCode刷题记录"><a href="#第一周LeetCode刷题记录" class="headerlink" title="第一周LeetCode刷题记录"></a>第一周LeetCode刷题记录</h2><a id="more"></a><p>1.<a href="http://wuyunjie.top/2019/03/28/LeetCode%E2%80%94%E2%80%941-Two-Sum/" title="LeetCode——1. Two Sum" target="_blank" rel="external">LeetCode——1. Two Sum</a><br>2.<a href="http://wuyunjie.top/2019/03/28/LeLeetCode%E2%80%94%E2%80%942-Add-Two-Numbers/" title="LeetCode——2. Add Two Numbers" target="_blank" rel="external">LeetCode——2. Add Two Numbers</a><br>3.<a href="http://wuyunjie.top/2019/03/28/LeetCode%E2%80%94%E2%80%943-Longest-Substring-Without-Repeating-Characters/" title="LeetCode——3. Longest Substring Without Repeating Characters" target="_blank" rel="external">LeetCode——3. Longest Substring Without Repeating Characters</a><br>4.<a href="http://wuyunjie.top/2019/03/28/LeLeetCode%E2%80%94%E2%80%947-Reverse-Integer/" title="LeetCode——7. Reverse Integer" target="_blank" rel="external">LeetCode——7. Reverse Integer</a><br>5.<a href="http://wuyunjie.top/2019/03/28/LeetCode%E2%80%94%E2%80%94709-To-Lower-Case/" title="LeetCode——709. To Lower Case" target="_blank" rel="external">LeetCode——709. To Lower Case</a><br>6.<a href="http://wuyunjie.top/2019/03/28/LeetCode%E2%80%94%E2%80%94771-Jewels-and-Stones/" title="LeetCode——771. Jewels and Stones" target="_blank" rel="external">LeetCode——771. Jewels and Stones</a><br>7.<a href="http://wuyunjie.top/2019/03/28/LeetCode%E2%80%94%E2%80%94929-Unique-Email-Addresses/" title="LeetCode——929. Unique Email Addresses" target="_blank" rel="external">LeetCode——929. Unique Email Addresses</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一周LeetCode刷题记录&quot;&gt;&lt;a href=&quot;#第一周LeetCode刷题记录&quot; class=&quot;headerlink&quot; title=&quot;第一周LeetCode刷题记录&quot;&gt;&lt;/a&gt;第一周LeetCode刷题记录&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode——5. Longest Palindromic Substring</title>
    <link href="http://wuyujie.top/2019/03/28/LeetCode%E2%80%94%E2%80%945-Longest-Palindromic-Substring/"/>
    <id>http://wuyujie.top/2019/03/28/LeetCode——5-Longest-Palindromic-Substring/</id>
    <published>2019-03-28T10:40:14.000Z</published>
    <updated>2019-03-31T07:01:51.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.<br><a id="more"></a></p></blockquote><p><strong>Example1:</strong></p><blockquote><p>Input: “babad”<br>Output: “bab”<br>Note: “aba” is also a valid answer.</p></blockquote><p><strong>Example2:</strong></p><blockquote><p>Input: “cbbd”<br>Output: “bb”</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>最开始想到的当然还是暴力算法，想法是先用暴力算法把题目做出来理解题目，然后尝试着对实现的算法进行改进，或者再想想有没有其他思路。最开始的想法是</p><blockquote><p>设置两个游标i、j，i从前往后遍历字符串，j从后往前遍历字符串；先将i固定住，然后j从后往前遍历，依次判断从当前j到i的字符串是不是一个回文，其长度是不是最大，若满足条件，就将该字符串的位置信息记录下来，遍历完后最终输出即可。</p></blockquote><p>显然这个方法的效果不会太好，选择尝试对其进行优化。想要的优化思路如下</p><blockquote><p>若当前要判断的子串比已经找到的最长回文子串要短，那么该子串以及比它短的子串都没必要在判断了，可以通过跳过这些不必要的比较过程节省大量时间</p></blockquote><p>修改过后，时间上果然有了很大提升，但结果告诉我显然这种方法还是不好，肯定存在更优化的方法。仔细分析后发现，其实这种方法就相当于将字符串反转后找最大公共子串，它存在一些问题：</p><blockquote><p>这种方法是从两端往内部收缩的算法，如果一个字符串恰好只是最内部的一部分不是子串，那么两端的整个判断过程都是无意义的，而且很费时。我们需要能够更早发现这不是一个回文。若我们把判断过程换一个方向就可以做到，即收缩改为扩展。由内而外的判断子串是不是回文，可以在不是回文的地方及时停止，并且保证之前判断的子串的确是回文，不是无意义的判断。</p></blockquote><p>实现后发现，这种扩展的算法效率比最开始的算法效率要好太多了，因为避免了许多无意义的计算过程。总结起来就是，有时候换一个方向想问题，可以得到更加优化的结果。<br>查看解题的文档后发现还有以下几种比较巧妙的方式：</p><blockquote><p>1.最长公共子串暴力算法<br>反转 S，使之变成 S’。找到 S 和 S’之间最长的公共子串,每当我们找到最长的公共子串的候选项时，都需要检查子串的索引是否与反向子串的原始索引相同。如果相同，那么我们尝试更新目前为止找到的最长回文子串；如果不是，我们就跳过这个候选项并继续寻找下一个候选。我所用到的第一种方法思路根这种方法一致。</p><p>2.动态规划<br>考虑 “ababa” 这个示例。如果我们已经知道 “bab” 是回文，那么很明显，”ababa” 一定是回文，因为它的左首字母和右尾字母是相同的。可以给出P(i,j)的定义如下</p><ul><li>P(i,j) = true,  如果子串Si,…,Sj是回文子串</li><li>P(i,j) = false, 其他情况</li></ul><p>因此P(i,j)更新公式如下：</p><ul><li>P(i,j) = (P(i+1,j−1) and Si == Sj)</li></ul><p>这是一个直观的动态规划解法，我们首先初始化一字母和二字母的回文，然后找到所有三字母回文，并依此类推</p><p>3.Manacher 算法<br>也叫“马拉松”算法，这个算法可以将时间复杂度提升为<strong>O(n)</strong>。</p><ol><li><p>首先对字符串进行预处理，处理原因是防止偶数问题。比如，有一个偶回文<strong>abba</strong>和一个奇回文<strong>opxpo</strong>，转换为<strong>#a#b#b#a#</strong>和<strong>#o#p#x#p#o#</strong>，长度都转换成了奇数。</p></li><li><p>定义一个辅助数组p[]，其中p[i]表示以 <strong>i</strong> 为中心的最长回文的半径</p></li><li><p>接下来的重点就是求解 p 数组。参考下图<br><img src="https://image-static.segmentfault.com/105/998/1059982876-58b966b759200" alt=""><br>设置两个变量，mx 和 id。mx 代表以 id 为中心的最长回文的右边界，也就是mx = id + p[id]。假设我们现在求p[i]，也就是以 i 为中心的最长回文半径，如果i &lt; mx，如上图，那么：<br><code>if (i &lt; mx) p[i]=min(p[2 * id - i], mx - i);</code><br><strong>(2 * id - i)</strong>为 i 关于 id 的对称点，即上图的 j 点，而p[j]表示以 j 为中心的最长回文半径，因此我们可以利用p[j]来加快更新数组。</p></li></ol></blockquote><p>参考文献：<a href="https://subetter.com/algorithm/manacher-algorithm.html" target="_blank" rel="external">https://subetter.com/algorithm/manacher-algorithm.html</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-改进的收缩算法-最长字符串匹配"><a href="#1-改进的收缩算法-最长字符串匹配" class="headerlink" title="1. 改进的收缩算法(最长字符串匹配)"></a>1. 改进的收缩算法(最长字符串匹配)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> LongestLength=<span class="number">1</span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=s.length()<span class="number">-1</span>;j&gt;i;j--)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> forward=i;</div><div class="line">                <span class="keyword">int</span> backward=j;</div><div class="line">                <span class="keyword">while</span>(s[forward]==s[backward]&amp;&amp;forward&lt;backward)</div><div class="line">                &#123;</div><div class="line">                    forward++;</div><div class="line">                    backward--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(forward&gt;=backward)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(LongestLength&lt;(j-i+<span class="number">1</span>))</div><div class="line">                    &#123;</div><div class="line">                        begin=i;</div><div class="line">                        LongestLength=(j-i+<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(LongestLength&gt;=(j-i+<span class="number">1</span>))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(LongestLength&gt;=(s.length()-i+<span class="number">1</span>))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">return</span> s.substr(begin, LongestLength); </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="2-扩展算法"><a href="#2-扩展算法" class="headerlink" title="2. 扩展算法"></a>2. 扩展算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(s.size() &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> max_len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> start_idx = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i &lt; s.size()) &#123;</div><div class="line">        <span class="keyword">int</span> r_ptr = i; </div><div class="line">        <span class="keyword">int</span> l_ptr = i;</div><div class="line">        <span class="comment">//找到回文中心</span></div><div class="line">        <span class="keyword">while</span>(r_ptr &lt; s.size()<span class="number">-1</span> &amp;&amp; s[r_ptr] == s[r_ptr + <span class="number">1</span>]) r_ptr++;</div><div class="line">        i = r_ptr+<span class="number">1</span>;<span class="comment">//记录下次启示位置，防止重复计算</span></div><div class="line">        <span class="comment">//从中心开始扩展</span></div><div class="line">        <span class="keyword">while</span>(r_ptr &lt; s.size()<span class="number">-1</span> &amp;&amp; l_ptr &gt; <span class="number">0</span> &amp;&amp; s[r_ptr + <span class="number">1</span>] == s[l_ptr - <span class="number">1</span>]) &#123;</div><div class="line">            r_ptr++;</div><div class="line">            l_ptr--;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//更新最长回文子串信息</span></div><div class="line">        <span class="keyword">int</span> new_len = r_ptr - l_ptr + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(new_len &gt; max_len) &#123;</div><div class="line">            start_idx = l_ptr;</div><div class="line">            max_len = new_len;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s.substr(start_idx, max_len);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-动态规划算法"><a href="#3-动态规划算法" class="headerlink" title="3. 动态规划算法"></a>3. 动态规划算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> LongestLength = <span class="number">1</span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(len,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(len,<span class="literal">false</span>));</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][i] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> dist = <span class="number">1</span>;dist &lt; len - i;dist++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> j = dist + i;</div><div class="line">                dp[i][j] = (dist == <span class="number">1</span>)? s[i] == s[j] : s[i] == s[j] &amp;&amp; dp[i+<span class="number">1</span>][j<span class="number">-1</span>];</div><div class="line">                <span class="keyword">if</span>(dp[i][j] &amp;&amp; j-i+<span class="number">1</span> &gt; LongestLength)</div><div class="line">                &#123;</div><div class="line">                    LongestLength = j-i+<span class="number">1</span>;</div><div class="line">                    begin=i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> s.substr(begin, LongestLength); </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="4-Manacher算法"><a href="#4-Manacher算法" class="headerlink" title="4. Manacher算法"></a>4. Manacher算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="comment">// 字符串预处理，插入 '#'</span></div><div class="line">        <span class="built_in">string</span> t = <span class="string">"$#"</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</div><div class="line">            t += s[i];</div><div class="line">            t += <span class="string">"#"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 处理t</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(t.size(), <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>, resLen = <span class="number">0</span>, resCenter = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t.size(); ++i) &#123;</div><div class="line">            p[i] = i &lt; mx ? min(p[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">while</span> (t[i + p[i]] == t[i - p[i]]) ++p[i]; <span class="comment">//// 不需边界判断，因为左有'$',右有'\0'</span></div><div class="line">            </div><div class="line">            <span class="comment">//希望 mx 尽可能的远</span></div><div class="line">            <span class="keyword">if</span> (mx &lt; i + p[i]) &#123;</div><div class="line">                mx = i + p[i];</div><div class="line">                id = i;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (resLen &lt; p[i]) &#123;</div><div class="line">                resLen = p[i];</div><div class="line">                resCenter = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s.substr((resCenter - resLen) / <span class="number">2</span>, resLen - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string &lt;strong&gt;s&lt;/strong&gt;, find the longest palindromic substring in &lt;strong&gt;s&lt;/strong&gt;. You may assume that the maximum length of &lt;strong&gt;s&lt;/strong&gt; is 1000.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——7. Reverse Integer</title>
    <link href="http://wuyujie.top/2019/03/28/LeLeetCode%E2%80%94%E2%80%947-Reverse-Integer/"/>
    <id>http://wuyujie.top/2019/03/28/LeLeetCode——7-Reverse-Integer/</id>
    <published>2019-03-28T09:52:20.000Z</published>
    <updated>2019-03-31T07:06:13.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a 32-bit signed integer, reverse digits of an integer..<br><a id="more"></a></p></blockquote><p><strong>Example1:</strong></p><blockquote><p>Input: 123<br>Output: 321</p></blockquote><p><strong>Example2:</strong></p><blockquote><p>Input: -123<br>Output: -321</p></blockquote><p><strong>Example3:</strong></p><blockquote><p>Input: 120<br>Output: 21</p></blockquote><p><strong>Note:</strong></p><blockquote><p>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>问题很简单，即将一个int型整数逆序。这里需要注意的是，int的表示范围是[−2^31,  2^31 − 1]，所以若逆序后的数在这个范围之外，即溢出的时候，直接输出0。<br>我的想法是，用一个更大的类型，即<strong>long</strong>来存储转化结果，然后判断结果在不在int的表示范围内，对计算结果进行处理。对比评论区，发现思路大致相同，这貌似就是最优的方法，还以为又会有啥逻辑上的转换。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">long</span> MAX=<span class="number">2147483647</span>;</div><div class="line">    <span class="keyword">long</span> MIN=<span class="number">-2147483648</span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            result=result*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">            x=x/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(result&gt;MAX||result&lt;MIN)</div><div class="line">        &#123;</div><div class="line">            result=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><p>据说出题人想考的是溢出判断，不能用long，只用Int的实现如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">long</span> MAX=<span class="number">2147483647</span>;</div><div class="line">    <span class="keyword">long</span> MIN=<span class="number">-2147483648</span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(result&gt;MAX/<span class="number">10</span>||result&lt;MIN/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            result=result*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">            x=x/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>也就是计算结果的时候，先判断这次计算会不会溢出，溢出就直接返回0</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a 32-bit signed integer, reverse digits of an integer..&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——3. Longest Substring Without Repeating Characters</title>
    <link href="http://wuyujie.top/2019/03/28/LeetCode%E2%80%94%E2%80%943-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://wuyujie.top/2019/03/28/LeetCode——3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2019-03-28T09:30:26.000Z</published>
    <updated>2019-03-31T07:04:05.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.<br><a id="more"></a></p></blockquote><p><strong>Example1:</strong></p><blockquote><p>Input: “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3. </p></blockquote><p><strong>Example2:</strong></p><blockquote><p>Input: “bbbbb”<br>Output: 1<br>Explanation: The answer is “b”, with the length of 1.</p></blockquote><p><strong>Example3:</strong></p><blockquote><p>Input: “pwwkew”<br>Output: 3<br>Explanation: The answer is “wke”, with the length of 3. </p><ul><li>Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</li></ul></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目要求的是，最长不含重复元素的字串。<br>最开始的想法是，用一个向量数组，存储以每一个位置为终点，包含该位置字符在内的最长不含重复元素的字串的长度，相当于一个dp的算法。数组更新方式是：用一个二重循环，外循环是从第一个字符到最后一个字符一次遍历；内循环用于判断，以该位置字符为终点，可以得到的最长不重复字串有多长。该算法成功解决了问题。<br>后来继续分析程序，发现可以不使用向量数组，因为数组内的每一个元素的值只需要访问一次，直接用一个变量保存即可。用此方法改进后，速度和空间都得到了优化。</p><blockquote><p>讨论区有另外一种更优化的解法，代码中用vector生成256个-1，用来存储每个字符上一次出现的下标。代码比较抽象，理解如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v(<span class="number">256</span>,<span class="number">-1</span>); <span class="comment">//构造字符串的容器。初始化为-1，意思是暂时不存在这个字符。</span></div><div class="line">start=<span class="number">-1</span>; <span class="comment">//start用来记录子串开始的位置，初始化为-1，表示没有开始构造子字符串。</span></div><div class="line"><span class="keyword">if</span>(v[s[i]]&gt;start)<span class="comment">//已经在该字符出现之前出现过相同的字符了，那么就将start也就是开始位置标记为上次该字符的出现位置。</span></div><div class="line">start=v[s[i]]; </div><div class="line">v[s[i]]=i; <span class="comment">//更新字符在容器中对应的下标</span></div><div class="line">ans=max(ans,i-start); <span class="comment">//i-start的意思是，当前for循环的i（也就是子字符串的结束字符）减去子字符串结束的字符的下标位置，结果就是子字符串的长度。</span></div></pre></td></tr></table></figure></p></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><ol><li>解法1(使用了向量数组)</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="comment">//空字符串，直接返回0</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> max=<span class="number">1</span>; <span class="comment">//非空字符串，最短为1</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; longestsub; <span class="comment">//每个位置的最长不重复字串长度</span></div><div class="line">        longestsub.push_back(<span class="number">1</span>); <span class="comment">//初始化第一个位置</span></div><div class="line"><span class="comment">//遍历每一个位置</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            longestsub.push_back(<span class="number">1</span>);</div><div class="line"><span class="comment">//从上一个位置的最长不重复字串为起点</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-longestsub[i<span class="number">-1</span>];j&lt;i;j++)</div><div class="line">            &#123;</div><div class="line"><span class="comment">//没有重复，继续计算</span></div><div class="line">                <span class="keyword">if</span>(s[j]!=s[i])</div><div class="line">                &#123;</div><div class="line">                    longestsub[i]++;</div><div class="line">                &#125;</div><div class="line"><span class="comment">//有重复，从1开始重新计数</span></div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    longestsub[i]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"><span class="comment">//记录最长长度</span></div><div class="line">            <span class="keyword">if</span>(longestsub[i]&gt;max)</div><div class="line">            &#123;</div><div class="line">                max=longestsub[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ol><li>不使用数组</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> Longest=<span class="number">1</span>,Last=<span class="number">1</span>;<span class="comment">//记录最长长度和上一字符的最长不重复字串长度</span></div><div class="line">        <span class="comment">//vector&lt;int&gt; longestsub;</span></div><div class="line">        <span class="comment">//longestsub.push_back(1);</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//longestsub.push_back(1);</span></div><div class="line">            <span class="keyword">int</span> present=<span class="number">1</span>;<span class="comment">//计算当前位置最长不重复字串长度</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-Last;j&lt;i;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(s[j]!=s[i])</div><div class="line">                &#123;</div><div class="line">                    present++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    present=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            Longest=max(Longest,present);</div><div class="line">            Last=present;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Longest;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>3.解法3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dict(<span class="number">256</span>, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>, start = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (dict[s[i]] &gt; start)</div><div class="line">                start = dict[s[i]];</div><div class="line">            dict[s[i]] = i;</div><div class="line">            maxLen = max(maxLen, i - start);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxLen;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string, find the length of the &lt;strong&gt;longest substring&lt;/strong&gt; without repeating characters.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——2. Add Two Numbers</title>
    <link href="http://wuyujie.top/2019/03/28/LeLeetCode%E2%80%94%E2%80%942-Add-Two-Numbers/"/>
    <id>http://wuyujie.top/2019/03/28/LeLeetCode——2-Add-Two-Numbers/</id>
    <published>2019-03-28T08:44:40.000Z</published>
    <updated>2019-03-31T07:06:02.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br><a id="more"></a><br>You may assume the two numbers do not contain any leading zero, except the number 0 itself. </p></blockquote><p><strong>Example:</strong></p><blockquote><p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目意思即，两个数是用链表按逆序存储的，现在要求两个数的和。实现算法思想即，模拟一个加法器，按位(这里即每一个链表结点)相加，需要设置一个进位标志位。这里只需要注意几种特殊情况即可：<br>1.两个数不一样长时，需要额外处理；<br>2.如果最终计算结果超过两个数的长度时，需要多增加一位。<br>在实现过程中，用一个新的链表来存储计算结果。<br>在查看讨论区后，发现算法思路大致相同，但是别人的代码更加精简，可以从中借鉴代码的一些简化方法和思想</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><ol><li>解法1</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> CF=<span class="number">0</span>; <span class="comment">//进位</span></div><div class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>; <span class="comment">//每位计算的中间结果</span></div><div class="line">        ListNode* result=<span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">//新链表存储结果，头结点</span></div><div class="line">        ListNode* present=result; <span class="comment">//结果链表当前节点</span></div><div class="line">        <span class="comment">//两个数都有节点还未计算是，循环按位计算</span></div><div class="line"><span class="keyword">while</span>(l1&amp;&amp;l2)</div><div class="line">        &#123;</div><div class="line"><span class="comment">//加法结果</span></div><div class="line">            tmp=(l1-&gt;val+l2-&gt;val+CF)%<span class="number">10</span>;</div><div class="line">            present-&gt;val=tmp;</div><div class="line">            </div><div class="line"><span class="comment">//进位</span></div><div class="line">            CF=(l1-&gt;val+l2-&gt;val+CF)/<span class="number">10</span>;</div><div class="line">            </div><div class="line"><span class="comment">//链表指针后移</span></div><div class="line">l1=l1-&gt;next;</div><div class="line">            l2=l2-&gt;next;</div><div class="line">            </div><div class="line"><span class="comment">//如果其中一个数已经加完，不再new新节点</span></div><div class="line">            <span class="keyword">if</span>(l1&amp;&amp;l2)</div><div class="line">            &#123;</div><div class="line">                present-&gt;next=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">                present=present-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//若其中一个数未加完，即比另外一个数要长，需要结合进位进一步处理</span></div><div class="line"><span class="comment">//两个数的处理方式相同</span></div><div class="line">        <span class="keyword">while</span>(l1)</div><div class="line">        &#123;</div><div class="line"><span class="comment">//有进位，需要加上进位继续处理</span></div><div class="line">            <span class="keyword">if</span>(CF==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                present-&gt;next=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">                present=present-&gt;next;</div><div class="line"></div><div class="line">                tmp=(l1-&gt;val+CF)%<span class="number">10</span>;</div><div class="line">                present-&gt;val=tmp;</div><div class="line"></div><div class="line">                CF=(l1-&gt;val+CF)/<span class="number">10</span>;</div><div class="line">                l1=l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line"><span class="comment">//若已经没进位，计算结果后面的数与该数剩下的数相同</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                present-&gt;next=l1;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(l2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(CF==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                present-&gt;next=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">                present=present-&gt;next;</div><div class="line"></div><div class="line">                tmp=(l2-&gt;val+CF)%<span class="number">10</span>;</div><div class="line">                present-&gt;val=tmp;</div><div class="line"></div><div class="line">                CF=(l2-&gt;val+CF)/<span class="number">10</span>;</div><div class="line">                l2=l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                present-&gt;next=l2;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//如果两个数都加完了，还有进位，那么new一个新节点，保存该进位</span></div><div class="line">        <span class="keyword">if</span>(CF==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            present-&gt;next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ol><li>精简的解法</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;</div><div class="line">        ListNode preHead(0), *p = &amp;preHead;</div><div class="line">        int extra = 0;</div><div class="line">        while (l1 || l2 || extra) &#123;</div><div class="line">            int sum = (l1 ? l1-&gt;val : 0) + (l2 ? l2-&gt;val : 0) + extra;</div><div class="line">            extra = sum / 10;</div><div class="line">            p-&gt;next = new ListNode(sum % 10);</div><div class="line">            p = p-&gt;next;</div><div class="line">            l1 = l1 ? l1-&gt;next : l1;</div><div class="line">            l2 = l2 ? l2-&gt;next : l2;</div><div class="line">        &#125;</div><div class="line">        return preHead.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;You are given two &lt;strong&gt;non-empty&lt;/strong&gt; linked lists representing two non-negative integers. The digits are stored in &lt;strong&gt;reverse order&lt;/strong&gt; and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——1. Two Sum</title>
    <link href="http://wuyujie.top/2019/03/28/LeetCode%E2%80%94%E2%80%941-Two-Sum/"/>
    <id>http://wuyujie.top/2019/03/28/LeetCode——1-Two-Sum/</id>
    <published>2019-03-28T08:42:04.000Z</published>
    <updated>2019-03-31T07:02:55.006Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.<br><a id="more"></a><br>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p></blockquote><p><strong>Example1:</strong></p><blockquote><p>Given nums = [2, 7, 11, 15], target = 9,<br>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>给定一个数组，和一个目标数target，要求数组中，和为target的两个数的下标。<br>想到的方法是暴力求法，即直接逐个遍历数组，找出满足要求的两个数。尽管这种方法能成功AC,但显然效率不高，这种方法比较耗时。需要寻找更加优化的算法。<br>查阅资料和题解思路得知，更加优化的方法是使用哈希表，这是一种通过以空间换取速度的方式，我们可以将查找时间从 O(n)降低到 O(1)。主要有以下两种：</p><blockquote><p>1.两遍哈希表<br>一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target - nums[i]）是否存在于表中。</p><p>2.一遍哈希表<br>更优化的方法是，我们可以一次完成计算。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p></blockquote><p>这里将这两种方法都实现了一遍。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><ol><li><p>解法1 暴力求法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indices;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            indices.push_back(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[j]==target-nums[i])</div><div class="line">                &#123;</div><div class="line">                    indices.push_back(j);</div><div class="line">                    <span class="keyword">return</span> indices;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            indices.pop_back();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> indices;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>解法2 两遍哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;  indices;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</div><div class="line">        &#123;</div><div class="line">            hash[nums[i]]=i;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> complement = target - nums[i];</div><div class="line">            <span class="keyword">if</span> (hash.count(complement) &amp;&amp; hash[complement] != i)</div><div class="line">            &#123;</div><div class="line">                indices.push_back(i);</div><div class="line">                indices.push_back(hash[complement]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> indices;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>一遍哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;  indices;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> complement = target - nums[i];</div><div class="line">            <span class="keyword">if</span> (hash.count(complement))</div><div class="line">            &#123;</div><div class="line">                indices.push_back(i);</div><div class="line">                indices.push_back(hash[complement]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            hash[nums[i]]=i;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> indices;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ol><hr><p>更新：map与unordered_map区别<br>原文：<a href="https://blog.csdn.net/BillCYJ/article/details/78985895" target="_blank" rel="external">https://blog.csdn.net/BillCYJ/article/details/78985895</a><br><strong>1.内部实现机理不同</strong><br><strong>map</strong>： map内部实现了一个红黑树（红黑树是非严格平衡二叉搜索树，而AVL是严格平衡二叉搜索树），红黑树具有自动排序的功能，因此map内部的所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素。</p><p><strong>unordered_map</strong>: unordered_map内部实现了一个哈希表（也叫散列表，通过把关键码值映射到Hash表中一个位置来访问记录，查找的时间复杂度可达到O(1)，其在海量数据处理中有着广泛应用）。因此，其元素的排列顺序是无序的。</p><p><strong>2.优缺点以及适用处</strong><br><strong>map：</strong><br>优点：</p><ol><li>有序性，这是map结构最大的优点，其元素的有序性在很多应用中都会简化很多的操作</li><li>红黑树，内部实现一个红黑书使得map的很多操作在lgn的时间复杂度下就可以实现，因此效率非常的高</li></ol><p>缺点：<br>空间占用率高，因为map内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点、孩子节点和红/黑性质，使得每一个节点都占用大量的空间</p><p>适用处：对于那些有顺序要求的问题，用map会更高效一些</p><p><strong>unordered_map：</strong><br>优点： 因为内部实现了哈希表，因此其查找速度非常的快</p><p>缺点： 哈希表的建立比较耗费时间</p><p>适用处：对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map</p><p><strong>总结：</strong></p><ol><li>内存占有率的问题就转化成红黑树 VS hash表 , 还是unorder_map占用的内存要高。</li><li>但是unordered_map执行效率要比map高很多</li><li>对于unordered_map或unordered_set容器，其遍历顺序与创建该容器时输入的顺序不一定相同，因为遍历是按照哈希表从前往后依次遍历的</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array of integers, return &lt;strong&gt;indices&lt;/strong&gt; of the two numbers such that they add up to a specific target.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——929. Unique Email Addresses</title>
    <link href="http://wuyujie.top/2019/03/28/LeetCode%E2%80%94%E2%80%94929-Unique-Email-Addresses/"/>
    <id>http://wuyujie.top/2019/03/28/LeetCode——929-Unique-Email-Addresses/</id>
    <published>2019-03-28T08:09:35.000Z</published>
    <updated>2019-03-31T07:05:47.413Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Every email consists of a local name and a domain name, separated by the @ sign.</p><p>For example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.<br><a id="more"></a><br>Besides lowercase letters, these emails may contain ‘.’s or ‘+’s.</p><p>If you add periods (‘.’) between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, “alice.z@leetcode.com” and “alicez@leetcode.com” forward to the same email address.  (Note that this rule does not apply for domain names.)</p><p>If you add a plus (‘+’) in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not apply for domain names.)</p><p>It is possible to use both of these rules at the same time.</p><p>Given a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? </p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: <code>{&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;}</code><br>Output: <strong>2</strong></p></blockquote><p>Explanation: “testemail@leetcode.com” and “testemail@lee.tcode.com” actually receive mails</p><p><strong>Note:</strong></p><ul><li>1 &lt;= emails[i].length &lt;= 100</li><li>1 &lt;= emails.length &lt;= 100</li><li>Each emails[i] contains exactly one ‘@’ character.</li></ul><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目的意思是，邮箱作为一个字符串，在字符”@”前面的部分：</p><blockquote><p>1.若出现字符’.’，则可以去掉该’.’;<br>2.若出现’+’，则从’+’到’@’的字符串都可去掉。</p></blockquote><p>根据这样的规则，判断总共有多少个不同的邮箱。思路很明确，只需要将每一个邮箱转换为其最简单的形式，然后去除其中重复的字符串，计算最终剩下的字符串个数即可。<br>首先联想到的是在每次处理完字符串后，将处理过的字符串放入一个set中，由于set内不含重复元素，所以自然就可以去重。但是vector有没有什么直接去重的方法呢？查阅资料后发现还真有，在vector类型中，有一种去重的方法是：先在vector内对向量进行排序，然后用erase加unique函数即可实现去除重复元素。</p><blockquote><ul><li>unique函数是一个去重函数，去除相邻中的重复元素（只留一个）。其中，最关键的是：并不是把重复的元素删除，而是全部放倒数组的后面。</li><li>由于unique只是去除（相邻）的重复元素，因此，为了去除重复的元素，应该，首先对数组Vector进行排序，这样保证重复元素在相邻的位置。</li><li>unique函数，返回的是去重后的尾地址。因此对于一个内容为{2, 2, 5, 5, 6}的vector，执行unique函数以后，vector大小并没有改变，只不过顺序变成了{2, 5, 6, 2, 5}，并且函数的返回值为:3。此时需要删除重复元素，只需要将后面的数据全部删除即可。</li></ul></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numUniqueEmails</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; emails)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator email=emails.begin();email&lt;emails.end();email++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(*email).find(<span class="string">'@'</span>);i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>((*email)[i]==<span class="string">'.'</span>)  (*email).erase(i,<span class="number">1</span>);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((*email)[i]==<span class="string">'+'</span>)</div><div class="line">                &#123;</div><div class="line">                    (*email).erase(i,(*email).find(<span class="string">'@'</span>)-i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(emails.begin(),emails.end());</div><div class="line">        emails.erase(unique(emails.begin(), emails.end()), emails.end());</div><div class="line">        <span class="keyword">return</span> emails.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Every email consists of a local name and a domain name, separated by the @ sign.&lt;/p&gt;
&lt;p&gt;For example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——709. To Lower Case</title>
    <link href="http://wuyujie.top/2019/03/28/LeetCode%E2%80%94%E2%80%94709-To-Lower-Case/"/>
    <id>http://wuyujie.top/2019/03/28/LeetCode——709-To-Lower-Case/</id>
    <published>2019-03-28T07:35:25.000Z</published>
    <updated>2019-03-31T07:04:41.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.<br><a id="more"></a></p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: “Hello”<br>Output: “hello”</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: “here”<br>Output: “here”</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: “LOVELY”<br>Output: “lovely”</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题主要用来熟悉下transform(STL transform)函数</p><blockquote><p>transform() 可以将函数应用到序列的元素上，并将这个函数返回的值保存到另一个序列中，它返回的迭代器指向输出序列所保存的最后一个元素的下一个位置。调用方法如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">OutputIterator</span>, <span class="title">class</span> <span class="title">UnaryOperator</span> &gt; </span></div><div class="line"><span class="title">OutputIterator</span> <span class="title">transform</span> ( <span class="title">InputIterator</span> <span class="title">first1</span>,  // 源容器的起始地址 </div><div class="line">  <span class="title">InputIterator</span> <span class="title">last1</span>,    // 源容器的终止地址 </div><div class="line">  <span class="title">OutputIterator</span> <span class="title">result</span>,  // 目标容器的起始地址 </div><div class="line">  <span class="title">UnaryOperator</span> <span class="title">op</span> );     <span class="comment">// 函数指针 </span></div><div class="line"><span class="comment">// typedef 目标容器元素类型 (*UnaryOperator)(源容器元素类型); </span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">InputIterator1</span>, <span class="title">class</span> <span class="title">InputIterator2</span>, </span></div><div class="line"><span class="title">class</span> <span class="title">OutputIterator</span>, <span class="title">class</span> <span class="title">BinaryOperator</span> &gt; </div><div class="line"><span class="title">OutputIterator</span> <span class="title">transform</span> ( <span class="title">InputIterator1</span> <span class="title">first1</span>,     // 源容器1的起始地址 </div><div class="line">  <span class="title">InputIterator1</span> <span class="title">last1</span>,       // 源容器1的终止地址 </div><div class="line">  <span class="title">InputIterator2</span> <span class="title">first2</span>,      // 源容器2的起始地址，元素个数与1相同 </div><div class="line">  <span class="title">OutputIterator</span> <span class="title">result</span>,      // 目标容器的起始地址，元素个数与1相同 </div><div class="line">  <span class="title">BinaryOperator</span> <span class="title">binary_op</span> ); <span class="comment">// 函数指针 </span></div><div class="line"><span class="comment">// typedef 目标容器元素类型 (*BinaryOperator)(源容器1元素类型，源容器2元素类型);</span></div></pre></td></tr></table></figure><p>所以transform结合大小写转换函数tolower，只需要一行即可完成任务</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">toLowerCase</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        transform(str.begin(),str.end(),str.begin(),::<span class="built_in">tolower</span>);</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——771. Jewels and Stones</title>
    <link href="http://wuyujie.top/2019/03/28/LeetCode%E2%80%94%E2%80%94771-Jewels-and-Stones/"/>
    <id>http://wuyujie.top/2019/03/28/LeetCode——771-Jewels-and-Stones/</id>
    <published>2019-03-28T07:26:09.000Z</published>
    <updated>2019-03-31T07:06:53.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>You’re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.<br><a id="more"></a><br>The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: J = “aA”, S = “aAAbbbb”<br>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: J = “z”, S = “ZZ”<br>Output: 0</p></blockquote><p><strong>Note:</strong></p><blockquote><ul><li>S and J will consist of letters and have length at most 50.</li><li>The characters in J are distinct.</li></ul></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>1.这是一道很简单的题，只需要逐个判断字符串 <strong>S</strong> 中的每个字符,是否在字符串 <strong>J</strong> 中出现过。设置一个计数器count，每次判断后更新该计数器，带遍历完整个字符串，即可得出最终结果。比较字符串的过程中，应用了string库里的find()函数。<br>2.在看别人提交的解法中，看见了另外一种比较有趣的方法，建立了一个与字符ASCII码大小相同的数组，每次判断字符是否存在，只需直接在数组内查看该字符ASCII码对应的位置是否为1，这是一种空间换时间的方法。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><ol><li>解法1 </li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="built_in">string</span> J, <span class="built_in">string</span> S)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(J.find(S[i]) != J.npos)</div><div class="line">            &#123;</div><div class="line">                ++count;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ol><li>解法2</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="built_in">string</span> J, <span class="built_in">string</span> S)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> exist[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; J.length();i++) &#123;</div><div class="line">            exist[J.at(i)] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; S.length();i++) &#123;</div><div class="line">            <span class="keyword">if</span> (exist[S.at(i)]) &#123;</div><div class="line">                num++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;You’re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>My new Post</title>
    <link href="http://wuyujie.top/2017/09/21/My-new-Post/"/>
    <id>http://wuyujie.top/2017/09/21/My-new-Post/</id>
    <published>2017-09-21T06:16:07.000Z</published>
    <updated>2017-09-21T06:16:07.941Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wuyujie.top/2017/07/10/hello-world/"/>
    <id>http://wuyujie.top/2017/07/10/hello-world/</id>
    <published>2017-07-10T10:09:19.631Z</published>
    <updated>2017-09-21T16:39:10.819Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
