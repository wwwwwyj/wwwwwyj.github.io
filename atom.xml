<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WuYJ&#39;s Blog</title>
  
  <subtitle>HELLO WORLD</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyujie.top/"/>
  <updated>2019-04-24T09:38:48.001Z</updated>
  <id>http://wuyujie.top/</id>
  
  <author>
    <name>Wuyunjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode--36. Valid Sudoku</title>
    <link href="http://wuyujie.top/2019/04/24/LeetCode-36-Valid-Sudoku/"/>
    <id>http://wuyujie.top/2019/04/24/LeetCode-36-Valid-Sudoku/</id>
    <published>2019-04-24T08:02:36.000Z</published>
    <updated>2019-04-24T09:38:48.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following</strong> .<br><a id="more"></a><br><strong>rules :</strong></p><ol><li>Each row must contain the digits 1-9 without repetition. </li><li>Each column must contain the digits 1-9 without repetition. </li><li>Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.</li></ol></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="A partially filled sudoku which is valid." title="A partially filled sudoku which is valid."></p><blockquote><p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input:<br>[<br>&nbsp;&nbsp;[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],<br>&nbsp;&nbsp;[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],<br>&nbsp;&nbsp;[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],<br>&nbsp;&nbsp;[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],<br>&nbsp;&nbsp;[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],<br>&nbsp;&nbsp;[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],<br>&nbsp;&nbsp;[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],<br>&nbsp;&nbsp;[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],<br>&nbsp;&nbsp;[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]<br>]<br>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input:<br>[<br>&nbsp;&nbsp;[“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],<br>&nbsp;&nbsp;[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],<br>&nbsp;&nbsp;[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],<br>&nbsp;&nbsp;[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],<br>&nbsp;&nbsp;[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],<br>&nbsp;&nbsp;[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],<br>&nbsp;&nbsp;[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],<br>&nbsp;&nbsp;[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],<br>&nbsp;&nbsp;[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]<br>]<br>Output: false<br>Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8’s in the top left 3x3 sub-box, it is invalid.</p></blockquote><p><strong>Note :</strong></p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li><li>The given board contain only digits 1-9 and the character <code>&#39;.&#39;</code>.</li><li>The given board size is always <code>9x9</code>.</li></ul><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>咋一看以为是解数独，会很复杂。读完题目后，发现只要求判断当前的棋盘上的数字是不是有效的，不需要考虑最终这个数独是不是可以解。所以相当于只需要判断当前这个已经存在的棋盘是否满足数独规则的要求。</p><p>数独的规则要求，每行，每列，以及每个<code>3x3</code>的子棋盘上，是否包括<code>1-9</code>这9个数字且不重复。现在考虑，肯定是需要把整个棋盘扫描一遍的，那么我们可以设置三个状态数组，来分别记录下以及扫描过的 <code>行/列/子棋盘</code> 中已经出现过的数，如果扫描到某 <code>行/列/子棋盘</code> 中有重复的元素前面已经出现过，直接返回false；若直到扫描结束，也为发现重复元素，说明棋盘有效，返回true。但是由于要记录每 <code>行/列/子棋盘</code> 的状态，需要声明三个较大的数组，所以对空间的消耗较高，应该还有更优化的解法。</p><p>评论区解题的大致思路都差不多，区别主要再求如何存储状态数组。有一种很优化的方法是利用位操作实现的，这种方法只使用一个short就存储了一行的状态，节省了很多空间，效率也得到了提升。</p><blockquote><ol><li>每行的状态初始化为0；</li><li>遇到一个数字num，就将1左移num位与状态数进行与操作，若结果不为0，说明有重复，返回false；否则，无重复，更新状态，即两数进行或操作。</li></ol></blockquote><p>参考：<br><a href="https://leetcode.com/problems/valid-sudoku/discuss/15452" target="_blank" rel="external">C++ very simple and easy understand. using bit operation</a><br><a href="https://leetcode.com/problems/valid-sudoku/discuss/15705/" target="_blank" rel="external">My C++ code (O(n2) time and space)</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; rows(<span class="number">9</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(<span class="number">9</span>, <span class="literal">false</span>));</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; columns(<span class="number">9</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(<span class="number">9</span>, <span class="literal">false</span>));</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; sub_box(<span class="number">9</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(<span class="number">9</span>, <span class="literal">false</span>));</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> sub_box_index = (i/<span class="number">3</span>)*<span class="number">3</span> + (j/<span class="number">3</span>);</div><div class="line">                <span class="keyword">int</span> num = board[i][j] - <span class="string">'1'</span>;</div><div class="line">                <span class="keyword">if</span>(rows[i][num] || columns[j][num] || sub_box[sub_box_index][num])</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                </div><div class="line">                rows[i][num] = columns[j][num] = sub_box[sub_box_index][num] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="利用位操作"><a href="#利用位操作" class="headerlink" title="利用位操作"></a>利用位操作</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">short</span>&gt; col(<span class="number">9</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">short</span>&gt; block(<span class="number">9</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">short</span>&gt; row(<span class="number">9</span>, <span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">'.'</span>) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> idx = <span class="number">1</span> &lt;&lt; (board[i][j] - <span class="string">'0'</span>);</div><div class="line">                    <span class="keyword">if</span> (row[i] &amp; idx || col[j] &amp; idx || block[i/<span class="number">3</span> * <span class="number">3</span> + j / <span class="number">3</span>] &amp; idx)</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                    </div><div class="line">                    row[i] |= idx;</div><div class="line">                    col[j] |= idx;</div><div class="line">                    block[i/<span class="number">3</span> * <span class="number">3</span> + j/<span class="number">3</span>] |= idx;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;board)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> existNum[<span class="number">10</span>][<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> i,j;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">9</span>; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(existNum[i][board[i][j] - <span class="string">'0'</span>] &amp; <span class="number">0x1</span>)<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// check if the i-row already has such number, LSB</span></div><div class="line">                    <span class="keyword">if</span>(existNum[j][board[i][j] - <span class="string">'0'</span>] &amp; <span class="number">0x2</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// check if the j-col already has such number, 2-LSB</span></div><div class="line">                    <span class="keyword">if</span>(existNum[(i/<span class="number">3</span>) *<span class="number">3</span> + j/<span class="number">3</span>][board[i][j] - <span class="string">'0'</span>] &amp; <span class="number">0x4</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// check if the k-subblock already has such number, 3-LSB</span></div><div class="line">                    existNum[i][board[i][j] - <span class="string">'0'</span>] ^=<span class="number">0x1</span>;</div><div class="line">                    existNum[j][board[i][j] - <span class="string">'0'</span>] ^=<span class="number">0x2</span>;</div><div class="line">                    existNum[(i/<span class="number">3</span>) *<span class="number">3</span> + j/<span class="number">3</span>][board[i][j] - <span class="string">'0'</span>] ^=<span class="number">0x4</span>;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated &lt;strong&gt;according to the following&lt;/strong&gt; .&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--35. Search Insert Position</title>
    <link href="http://wuyujie.top/2019/04/24/LeetCode-35-Search-Insert-Position/"/>
    <id>http://wuyujie.top/2019/04/24/LeetCode-35-Search-Insert-Position/</id>
    <published>2019-04-24T08:02:36.000Z</published>
    <updated>2019-04-24T08:35:12.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br><a id="more"></a><br>You may assume no duplicates in the array.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: [1,3,5,6], 5<br>Output: 2</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: [1,3,5,6], 2<br>Output: 1</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: [1,3,5,6], 7<br>Output: 4</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input: [1,3,5,6], 0<br>Output: 0</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>显然，这道题还是可以使用二分查找求解。使用二分搜索查找target，若找到了，直接返回找到的下标。若target不存在，二分搜索结束后，low所指向的位置就是target插入的位置。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(low &lt;= high)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) high = mid - <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> low = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> low;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.size();</div><div class="line">        <span class="keyword">while</span>(low &lt; high)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) low = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = mid;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> high;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--34. Find First and Last Position of Element in Sorted Array</title>
    <link href="http://wuyujie.top/2019/04/23/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://wuyujie.top/2019/04/23/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2019-04-23T09:42:25.000Z</published>
    <updated>2019-04-23T11:05:52.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given <strong>target</strong> value.<br><a id="more"></a><br>Your algorithm’s runtime complexity must be in the order of O(log n).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [5,7,7,8,8,10], target = 8<br>Output: [3,4]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [5,7,7,8,8,10], target = 6<br>Output: [-1,-1]</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>依旧是以O(log n)复杂度查找一个数。这道题给出的数组是有序的而且可以有重复元素，要求给出target出现的范围。</p><p>因为数组完全有序，所以思路依旧是使用二分查找。首先用二分查找，查找一个等于target的元素的位置，然后从该位置开始左右拓展，从而找到target出现的范围。若没有找到该数，直接返回<code>{-1, -1}</code>即可。可以看出，算法思路很简单。</p><p>但是这可能不是严格意义上的O(logn)的算法，因为在最坏的情况下会变成O(n)，比如当数组里的数全是目标值的话，从中间向两边找边界就会一直遍历完整个数组。一种真正意义上的O(logn)的算法是，使用两次二分查找法，第一次找到左边界，第二次调用找到右边界即可。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(low &lt; high)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid] == target)</div><div class="line">            &#123;</div><div class="line">                low = mid;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) high = mid<span class="number">-1</span>;</div><div class="line">            <span class="keyword">else</span> low = mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(nums[low] == target)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> start = low, end = low;</div><div class="line">            <span class="keyword">while</span>(start &gt; <span class="number">0</span> &amp;&amp; nums[start<span class="number">-1</span>] == nums[start]) start--;</div><div class="line">            <span class="keyword">while</span>(end &lt; nums.size()<span class="number">-1</span> &amp;&amp; nums[end+<span class="number">1</span>] == nums[end]) end++;</div><div class="line">            <span class="keyword">return</span> &#123;start,end&#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="两遍二分查找"><a href="#两遍二分查找" class="headerlink" title="两遍二分查找"></a>两遍二分查找</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">2</span>, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.size() - <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(low &lt; high)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)</div><div class="line">                low = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = mid;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(high &lt; <span class="number">0</span> || nums[high] != target) <span class="keyword">return</span> res;</div><div class="line">        res[<span class="number">0</span>] = high;high = nums.size();</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(low &lt; high)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid] &lt;= target)</div><div class="line">                low = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = mid;</div><div class="line">        &#125;</div><div class="line">        res[<span class="number">1</span>] = high - <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array of integers nums sorted in ascending order, find the starting and ending position of a given &lt;strong&gt;target&lt;/strong&gt; value.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--33. Search in Rotated Sorted Array</title>
    <link href="http://wuyujie.top/2019/04/23/LeetCode-33-Search-in-Rotated-Sorted-Array/"/>
    <id>http://wuyujie.top/2019/04/23/LeetCode-33-Search-in-Rotated-Sorted-Array/</id>
    <published>2019-04-23T08:27:12.000Z</published>
    <updated>2019-04-23T09:41:24.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.<br><a id="more"></a><br>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm’s runtime complexity must be in the order of O(log n).</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [4,5,6,7,0,1,2], target = 0<br>Output: 4</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [4,5,6,7,0,1,2], target = 3<br>Output: -1</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>看见要求算法复杂度O(log n)，并且数组有序（轮转有序），最先想到的是，用二分查找。</p><p>但是二分法需要进行修改，不能直接使用。第一中方法是，对二分查早进行改进，使它符合这道题：</p><blockquote><p>二分搜索法的关键在于获得了中间数后，判断下面要搜索左半段还是右半段，我们可以观察到一种规律，如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的，我们只要在有序的半段里用首尾两个数组来判断目标值是否在这一区域内，这样就可以确定保留哪半边了。</p></blockquote><p>另一种方法是，我们还是使用原来的二分查找算法。不过我们需要先找到数组轮转的位置。如对于数组 <code>[4,5,6,7,0,1,2]</code>，可以找到轮转pivot是7，下标是3。根据pivot，可以把数组分为真正有序的两部分，判断target可能出现在哪部分，再继续用原来的二分查找就可以得到结果了。这里寻找pivot也可以用二分查找实现，复杂度依旧是O(log n)。</p><p>可以用异或来编写判断语句使代码更精简，代码如下。</p><p>参考：<br><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/discuss/14419/" target="_blank" rel="external">Pretty short C++/Java/Ruby/Python</a><br><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/discuss/14435/Clever-idea-making-it-simple" target="_blank" rel="external">Clever idea making it simple</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="修改后的二分查找"><a href="#修改后的二分查找" class="headerlink" title="修改后的二分查找"></a>修改后的二分查找</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[right]) &#123;</div><div class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; nums[right] &gt;= target) left = mid + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> right = mid - <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; nums[mid] &gt; target) right = mid - <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> left = mid + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="寻找pivot"><a href="#寻找pivot" class="headerlink" title="寻找pivot"></a>寻找pivot</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPivot</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.size() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(low &lt; high)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[mid+<span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid] &gt;= nums[<span class="number">0</span>])</div><div class="line">                    low = mid+<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    high = mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> low;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(low &lt; high)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</div><div class="line">            &#123;</div><div class="line">                high = mid - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                low = mid + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(low == high &amp;&amp; nums[low] == target) <span class="keyword">return</span> low;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> pivot = findPivot(nums);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(target &lt;= nums[pivot] &amp;&amp; target &gt;= nums[<span class="number">0</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> binarySearch(nums, <span class="number">0</span>, pivot, target);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> binarySearch(nums, pivot+<span class="number">1</span>, nums.size()<span class="number">-1</span>, target);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="使用异或"><a href="#使用异或" class="headerlink" title="使用异或"></a>使用异或</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = <span class="keyword">int</span>(nums.size()) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> ((nums[<span class="number">0</span>] &gt; target) ^ (nums[<span class="number">0</span>] &gt; nums[mid]) ^ (target &gt; nums[mid]))</div><div class="line">            lo = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            hi = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lo == hi &amp;&amp; nums[lo] == target ? lo : <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--32. Longest Valid Parentheses</title>
    <link href="http://wuyujie.top/2019/04/23/LeetCode-32-Longest-Valid-Parentheses/"/>
    <id>http://wuyujie.top/2019/04/23/LeetCode-32-Longest-Valid-Parentheses/</id>
    <published>2019-04-23T05:57:29.000Z</published>
    <updated>2019-04-23T08:23:31.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.<br><a id="more"></a></p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: “(()”<br>Output: 2<br>Explanation: The longest valid parentheses substring is “()”</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: “)()())”<br>Output: 4<br>Explanation: The longest valid parentheses substring is “()()”</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>给定了一个括号的字符串，求最长有效子串的长度。</p><p>首先就是暴力解法，逐个字符遍历字符串，判断从当前字符开始的最大有效括号长度，若大于已经找到的最大有效长度，则更新最大有效长度。遍历完成后，也就找到了最长有效长度。这种方法思路简单而且没有超时，但是效率很低。</p><p>主要是因为整个过程会有许多重复的判断。这个问题可以用动态规划来求解：定义一个数组dp，保存以字符串中第i个字符为结尾的最长有效子串的长度。由于有效字符串是以 ‘)’ 结束的，所以 ‘(‘ 必定不构成有效子串。所以我们将dp初始化为全0，当遇到 ‘)’ 时才更新dp数组，更新规则如下：</p><blockquote><ol><li>若s[i] == ‘)’ 且 s[i-1] == ‘(‘，即形如“……()”，更新dp[i] = dp[i - 2] + 2</li><li>若s[i] == ‘)’ 且 s[i-1] == ‘)’，即形如”……))”，此时若s[i - dp[i-1] - 1] == ‘(‘，更新dp[i] = dp[i - 1] + dp[i - dp[i-1] - 2] + 2</li></ol></blockquote><p>每次更新dp后，判断当前更新后的值是否比已经找到的最长有效长度大，若是则更新最长有效长度。当dp更新完成后，也就找到了最长有效长度。这种方法只需要扫描一遍字符串，避免了重复的判断。</p><p>除了这两种方法外，还有两种算法：</p><blockquote><ol><li><p>使用栈<br>初始化一个栈，先在栈中存入-1。之后遍历给定的字符串，判断当前扫描的字符串是不是有效的，同时更新最长有效长度。<br> 1) 若遇到 ‘(‘，将其下标推入栈内<br> 2) 若遇到 ‘)’，从栈顶弹出一个元素后，用当前元素下标减去剩下栈顶的元素，得到一个当前元素的有效子串长度。若从栈顶弹出元素后，栈空，就将当前元素的下标放入栈内继续遍历。<br>遍历完字符串后，找到最长有效长度。</p></li><li><p>不使用额外空间<br>用两个计数器 left 和 right ，记录当前遇到的有效左括号数和右括号数。分两遍扫描字符串：<br> 1) 先从左向右扫描，遇到 “(“ 就增加left，遇到 ‘)’ 就增加right，当left和right相等时，得到一个有效子串，计算该有效子串长度并更新最长有效长度。若right大于left，将left和right都置0，继续扫描。<br> 2) 用相同的步骤，从右向左再扫描一编。</p></li></ol></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur = <span class="number">0</span>; cur &lt; s.length(); cur++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> open = <span class="number">0</span>, close = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=cur; i&lt;s.length(); i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(s[i] == <span class="string">'('</span>)</div><div class="line">                &#123;</div><div class="line">                    open++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    ++close;</div><div class="line">                    <span class="keyword">if</span>(close == open)</div><div class="line">                        longest = max(longest, i-cur+<span class="number">1</span>);</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(close &gt; open)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(longest &gt;= (s.length() - cur))</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> longest;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="DP算法"><a href="#DP算法" class="headerlink" title="DP算法"></a>DP算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(s.length(), <span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt; s.length(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">')'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(s[i<span class="number">-1</span>] == <span class="string">'('</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i] = i<span class="number">-2</span> &gt;= <span class="number">0</span> ? dp[i<span class="number">-2</span>]+<span class="number">2</span> : <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(i - dp[i<span class="number">-1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s[i - dp[i<span class="number">-1</span>] - <span class="number">1</span>] == <span class="string">'('</span>)</div><div class="line">                    &#123;</div><div class="line">                        dp[i] = dp[i<span class="number">-1</span>] + <span class="number">2</span> + ((i-dp[i<span class="number">-1</span>]<span class="number">-2</span> &gt;= <span class="number">0</span>)?dp[i-dp[i<span class="number">-1</span>]<span class="number">-2</span>]:<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                longest = max(dp[i], longest);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> longest;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</div><div class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</div><div class="line">        <span class="built_in">stack</span>.push(<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; s.length(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'('</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">stack</span>.push(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">stack</span>.pop();</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">stack</span>.empty())</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">stack</span>.push(i);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> curlen = i - <span class="built_in">stack</span>.top();</div><div class="line">                    longest = max(longest, curlen);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> longest;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="不使用额外空间，两遍扫描"><a href="#不使用额外空间，两遍扫描" class="headerlink" title="不使用额外空间，两遍扫描"></a>不使用额外空间，两遍扫描</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> open = <span class="number">0</span>, close = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'('</span>) open++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ++close;</div><div class="line">                <span class="keyword">if</span>(close == open)</div><div class="line">                    longest = max(longest, <span class="number">2</span>* open);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(close &gt; open)</div><div class="line">                &#123;</div><div class="line">                    open = close = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        open = close = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">')'</span>) close++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ++open;</div><div class="line">                <span class="keyword">if</span>(close == open)</div><div class="line">                    longest = max(longest, <span class="number">2</span>* open);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(open &gt; close)</div><div class="line">                &#123;</div><div class="line">                    open = close = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> longest;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, find the length of the longest valid (well-formed) parentheses substring.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--31. Next Permutation</title>
    <link href="http://wuyujie.top/2019/04/22/LeetCode-31-Next-Permutation/"/>
    <id>http://wuyujie.top/2019/04/22/LeetCode-31-Next-Permutation/</id>
    <published>2019-04-22T10:49:53.000Z</published>
    <updated>2019-04-22T12:00:08.633Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.<br><a id="more"></a><br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p><p>The replacement must be in-place and use only constant extra memory.</p><p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p></blockquote><pre><code>1,2,3 → 1,3,23,2,1 → 1,2,31,1,5 → 1,5,1</code></pre><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>前不久好像刚在一道题用过这个函数，现在就遇到实现这个函数了。对于全排列的具体实行过程不是很熟悉，没有什么思路。在查看题解后，发现对于这个问题，14世纪就有人已经提出了简单的解法——<a href="https://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order" title="Generation in lexicographic order" target="_blank" rel="external">Generation in lexicographic order</a>，算法思路如下：</p><blockquote><ol><li>从右到左，找到第一对连续的数a[i]和a[i-1]，使得满足a[i] &gt; a[i-1];这样a[i]右边的序列就是一个降序的排列（这个序列理论上没有下一个排列，题目中让这种情况的下一个变成了第一个）。如果这一步没有找到上述连续数对，直接将数列反转即可得到最终结果。</li><li>从 a[i] 开始的降序排序中找到刚好大于a[i-1]的数 a[k]，将两个数进行交换。</li><li>将降序的数列a[i:]反转，得到下一个排列。</li></ol></blockquote><p><a href="https://imgchr.com/i/EkLSDe" target="_blank" rel="external"><img src="https://s2.ax1x.com/2019/04/22/EkLSDe.gif" alt="EkLSDe.gif"></a></p><p>讨论区有一种调用库实现上述算法的代码。代码很短，从里面学到了一些STL的函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">auto</span> i = is_sorted_until(nums.rbegin(), nums.rend());</div><div class="line">    <span class="keyword">if</span> (i != nums.rend())</div><div class="line">        swap(*i, *upper_bound(nums.rbegin(), i, *i));</div><div class="line">    reverse(nums.rbegin(), i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>is_sorted_until(), 它返回序列中“失序”的元素。 如果整个序列被排序（根据谓词），那么它将返回最后一个。</p><p>rbegin 和 rend, 反向迭代器, 分别返回指向容器尾元素和首元素前一位置的反向迭代器。</p><p>upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的<strong>地址</strong>，不存在则返回end。lower_bound( begin,end,num)类似，不过它找的是第一个小于等于num的数。</p></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.size(), i, k;</div><div class="line">        <span class="keyword">for</span>(i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i<span class="number">-1</span>])</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i &lt;= <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            reverse(nums.begin(), nums.end());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(k = n - <span class="number">1</span>; k &gt; i; k--)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[k] &gt; nums[i<span class="number">-1</span>])</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            swap(nums[i<span class="number">-1</span>], nums[k]);</div><div class="line">            reverse(nums.begin() + i, nums.end());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">auto</span> i = is_sorted_until(nums.rbegin(), nums.rend());</div><div class="line">    <span class="keyword">if</span> (i != nums.rend())</div><div class="line">        swap(*i, *upper_bound(nums.rbegin(), i, *i));</div><div class="line">    reverse(nums.rbegin(), i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Implement &lt;strong&gt;next permutation&lt;/strong&gt;, which rearranges numbers into the lexicographically next greater permutation of numbers.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--30. Substring with Concatenation of All Words</title>
    <link href="http://wuyujie.top/2019/04/22/LeetCode-30-Substring-with-Concatenation-of-All-Words/"/>
    <id>http://wuyujie.top/2019/04/22/LeetCode-30-Substring-with-Concatenation-of-All-Words/</id>
    <published>2019-04-22T07:26:04.000Z</published>
    <updated>2019-04-22T09:39:29.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.<br><a id="more"></a></p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input:<br>&nbsp;&nbsp;&nbsp;&nbsp; s = “barfoothefoobarman”,<br>&nbsp;&nbsp;&nbsp;&nbsp; words = [“foo”,”bar”]<br>Output: [0,9]<br>Explanation: Substrings starting at index 0 and 9 are “barfoor” and “foobar” respectively.<br>The output order does not matter, returning [9,0] is fine too.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input:<br>&nbsp;&nbsp;&nbsp;&nbsp; s = “wordgoodgoodgoodbestword”,<br>&nbsp;&nbsp;&nbsp;&nbsp; words = [“word”,”good”,”best”,”word”]<br>Output: []</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题让我们求串联所有单词的子串，就是说给定一个长字符串，再给定几个长度相同的单词，让从长字符串中找出串联给定所有单词的子串的起始位置。</p><p>最开始以为单词不重复，所以最初的想法是。用一个map来记录每次单词上一次出现的位置，以及用indexStart记录当前子串开始位置。之后不断检查，若检测到单词不在words内或者单词上次出现在indexStart之后即重复了，就重新进行下一次检查。但是words内单词是可以重复的，所以这种方法行不通，需要记录单词出现的次数。</p><p>所以要用到两个map，第一个map内存入words内每个单词可以出现的次数，第二个map存储当前扫描的子串内，单词已经出现的次数。从头开始扫描字符串，每次得到一个单词，看其是否在word内以及出现次数是否在要求范围内，如果不满足，则进行下一次扫描。如果正好匹配完给定单词集里所有的单词，则把开始地址存入结果中。</p><p>算法可以继续优化，我们不必每次都从头开始判断每个单词。可以设置一个单词组成字符串大小的滑动窗口。</p><blockquote><p>若当前判断的单词超过限制的出现次数时导致匹配失败，将窗口后移到该子串中该单词第一个出现的位置之后；<br>若当前判断的单词不在words中导致匹配失败，将窗口完全移动到该单词之后。<br>若判断到窗口最后的位置且匹配成功，记录下当前窗口的开始位置，将窗口后移一个单词长度，继续下一次判断。</p></blockquote><p>我们同时也可以减少到只使用一个map，map记录单词可以出现的次数，没出现一次就减一。在窗口移动时，我们可以同时恢复现场。这种使用滑动窗口的方法，省去了大量重复的或者不必要的判断，所以算法性能得到极大提升。</p><p>查看评论区发现还有一种解法，这种解法思想很巧妙，有些复杂也不是特别懂，在这写下大致思想：</p><blockquote><ol><li>定义一个hash函数，将每个单词映射到一个唯一的值上</li><li>用定义好的hash函数，计算出words总的hash值words_hashsum</li><li>还是使用一个窗口，先计算第一个窗口内对应字符串的hashsum,与words的hash_sum比较，若相等则把窗口开始位置记录下来。</li><li>窗口后移一个位置，继续计算其hashsum进行判断。</li></ol></blockquote><p>这种方法尽管最后能求解ac，但感觉可能存在问题，比如两个单词 a, c的hash值分别为1 3, b的hash值为2, 那么可能(a,c)的组合和(b,b)的组合hashsum相等，所以是有可能会出错的。</p><p>参考：<br><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/discuss/13791/" target="_blank" rel="external">My 24ms C++ solution (O(N) time, using an unordered_map)</a><br><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/discuss/192123/" target="_blank" rel="external">O(n) C++ solution, 8ms, beats 100%</a><br><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/discuss/13700/" target="_blank" rel="external">My AC c++ code, O(n) complexity, 26ms</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="两个哈希表"><a href="#两个哈希表" class="headerlink" title="两个哈希表"></a>两个哈希表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findSubstring(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; wordfound,counts;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(s.empty() || words.empty()) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> wordsize = words.size(), wordlen = words[<span class="number">0</span>].length();</div><div class="line">        <span class="keyword">int</span> slen = s.length();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word:words) counts[word]++;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= slen - wordsize * wordlen; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j;</div><div class="line">            <span class="keyword">for</span>(j = <span class="number">0</span> ; j &lt; wordsize; ++j)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">string</span> temp = s.substr(i + j*wordlen, wordlen);</div><div class="line">                <span class="keyword">if</span>(counts[temp] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">                wordfound[temp]++;</div><div class="line">                <span class="keyword">if</span>(wordfound[temp] &gt; counts[temp]) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j == wordsize) res.push_back(i);</div><div class="line">            wordfound.clear();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="滑动窗口的方法"><a href="#滑动窗口的方法" class="headerlink" title="滑动窗口的方法"></a>滑动窗口的方法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findSubstring(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; counts;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(s.empty() || words.empty()) <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> wordsize = words.size(), wordlen = words[<span class="number">0</span>].length();</div><div class="line">        <span class="keyword">int</span> slen = s.length();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(slen &lt; wordsize * wordlen) <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start, cur, founded;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word:words) counts[word]++;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordlen; ++i)</div><div class="line">        &#123;</div><div class="line">            start = cur = i;</div><div class="line">            founded = wordsize;</div><div class="line">            </div><div class="line">            <span class="keyword">while</span>(start &lt;= slen - wordsize * wordlen)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//单词不在words内,整个窗口后移到后一个单词</span></div><div class="line">                <span class="keyword">if</span>(counts.count(s.substr(cur,wordlen)) == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    founded = wordsize;</div><div class="line">                    <span class="keyword">for</span>(;start != cur; start += wordlen)</div><div class="line">                        counts[s.substr(start,wordlen)]++;</div><div class="line">                    start += wordlen;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(counts[s.substr(cur,wordlen)] == <span class="number">0</span>)</div><div class="line">                <span class="comment">//单词出现次数超过限制,窗口移动到该单词第一次出现的下一个位置</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">for</span>(;s.substr(start,wordlen) != s.substr(cur,wordlen);start += wordlen)</div><div class="line">                    &#123;</div><div class="line">                        counts[s.substr(start,wordlen)]++;</div><div class="line">                        founded++;</div><div class="line">                    &#125;</div><div class="line">                    start += wordlen;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    counts[s.substr(cur,wordlen)]--;</div><div class="line">                    <span class="keyword">if</span>(--founded == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        res.push_back(start);</div><div class="line">                        counts[s.substr(start,wordlen)]++;</div><div class="line">                        start += wordlen;</div><div class="line">                        founded++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                cur += wordlen;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">for</span>(;start&lt;cur;start+=wordlen)</div><div class="line">                counts[s.substr(start,wordlen)]++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="hash函数"><a href="#hash函数" class="headerlink" title="hash函数"></a>hash函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findSubstring(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; retVal;</div><div class="line">        <span class="keyword">if</span> (words.size()&lt;<span class="number">1</span> || s.size()&lt;<span class="number">1</span>) <span class="keyword">return</span> retVal;</div><div class="line">        <span class="comment">// Hash all the words seperately then add them together to get a magic number</span></div><div class="line">        <span class="built_in">std</span>::hash&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; hash_fn;</div><div class="line">        <span class="keyword">size_t</span> magicNumber = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;words.size(); i++) &#123;</div><div class="line">            magicNumber += hash_fn(words[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> wordLength = words[<span class="number">0</span>].size();</div><div class="line">        <span class="comment">// Concatenated substring will be a given length</span></div><div class="line">        <span class="keyword">int</span> minimumSize = words.size()*wordLength;</div><div class="line">        <span class="comment">// We do a sliding window calculation for each 'offset' a pattern might have</span></div><div class="line">        <span class="comment">// This is faster than re-hashing the entire window because we can just drop the least recently hashed value</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> startOffset=<span class="number">0</span>; startOffset&lt;wordLength; startOffset++) &#123;</div><div class="line">            <span class="keyword">int</span> i;</div><div class="line">            <span class="keyword">size_t</span> hashSum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> minimum = <span class="number">0L</span>L-minimumSize-startOffset+s.size();</div><div class="line">            <span class="comment">// This means that the requested offset does not leave us with enough characters in the string!</span></div><div class="line">            <span class="keyword">if</span> (minimum &lt; <span class="number">0</span>) <span class="keyword">return</span> retVal;</div><div class="line">            <span class="keyword">for</span> (i=s.size()-startOffset-wordLength; i&gt;=minimum; i-=wordLength) &#123;</div><div class="line">                hashSum+=hash_fn(s.substr(i,wordLength));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (hashSum==magicNumber) retVal.push_back(i+wordLength);</div><div class="line">            <span class="keyword">for</span> (;i&gt;=<span class="number">0</span>; i-=wordLength) &#123;</div><div class="line">                hashSum-=hash_fn(s.substr(i+minimumSize,wordLength));</div><div class="line">                hashSum+=hash_fn(s.substr(i,wordLength));</div><div class="line">                <span class="keyword">if</span> (hashSum==magicNumber) retVal.push_back(i);</div><div class="line">            &#125;</div><div class="line">        &#125;        </div><div class="line">        <span class="keyword">return</span> retVal;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;You are given a string, &lt;strong&gt;s&lt;/strong&gt;, and a list of words, &lt;strong&gt;words&lt;/strong&gt;, that are all of the same length. Find all starting indices of substring(s) in &lt;strong&gt;s&lt;/strong&gt; that is a concatenation of each word in &lt;strong&gt;words&lt;/strong&gt; exactly once and without any intervening characters.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--29. Divide Two Integers</title>
    <link href="http://wuyujie.top/2019/04/22/LeetCode-29-Divide-Two-Integers/"/>
    <id>http://wuyujie.top/2019/04/22/LeetCode-29-Divide-Two-Integers/</id>
    <published>2019-04-22T05:54:54.000Z</published>
    <updated>2019-04-22T07:11:08.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.<br><a id="more"></a><br>Return the quotient after dividing <strong>dividend</strong> by <strong>divisor</strong>.</p><p>The integer division should truncate toward zero.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: dividend = 10, divisor = 3<br>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: dividend = 7, divisor = -3<br>Output: -2</p></blockquote><p><strong>Note :</strong></p><blockquote><ul><li>Both dividend and divisor will be 32-bit signed integers.</li><li>The divisor will never be 0.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 2^31 − 1 when the division result overflows.</li></ul></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目要求实现除法，并且不能使用乘法、除法和模这些操作。这就意味着我们只能使用加减或者位运算，来实现除法的过程。</p><p>第一种思路是，用被除数减去除数，知道被除数小于除数时，返回减法进行的次数。</p><p>这需要先对输入的两个数进行处理，若除数或被除数是负数，不能直接进行减法，需要先取他们的绝对值。但这是会出现越界的情况，如-2^31的绝对值就越界了，int不能存储。但是题目要求的是只能用32-bit的环境，所以不能用long来解决了，这里想到的是使用unsigned int来保存绝对值结果。这时又碰到了另一个问题，abs()函数也无法处理越界的数，即求abs(-2^31)时会报错，解决方法是使用labs()函数，或者重写一个abs()，可以实现需要的_abs()如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp = value;</div><div class="line">    <span class="keyword">return</span> (temp &gt; <span class="number">0x80000000</span>) ? -value : temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>除此之外，还需要单独判断一种结果溢出的情况，也就是<code>dividend = -2^31，divisor = -1</code> 的情况，这时直接输出INT_MAX即可。</p><p>这种方法效率太低，最后超时了。在这种方法基础上可以进行优化。可以加入位运算，如果被除数大于除数，找到小于被除数的，且是除数2^n的最大的数，被除数减去该数，结果加上n后，重复上述操作，直到被除数小于除数为止。这里寻找这个符合条件的数时，就可以运用位运算。</p><p>还有一种比较有意思的解法，就是运用对数求解。首先分别求出被除数和除数的对数，算出它们的差后，将其作为指数，求 e 的指数结果。公式如下：<br>    a/b = e^(log(a) - log(b))<br>但是计算对数时，应该使用了除法/，所以可能违反了条件。</p><p>参考：<br><a href="https://blog.csdn.net/zephyr_be_brave/article/details/8722397" title="C++自己实现abs" target="_blank" rel="external">C++自己实现abs</a><br><a href="https://leetcode.com/problems/divide-two-integers/discuss/13407/C%2B%2B-bit-manipulations" title="C++ bit manipulations" target="_blank" rel="external">C++ bit manipulations</a><br><a href="https://leetcode.com/problems/divide-two-integers/discuss/13460/6-line-solution-C%2B%2B" title="6 line solution C++" target="_blank" rel="external">6 line solution C++</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="只用加减法（超时）"><a href="#只用加减法（超时）" class="headerlink" title="只用加减法（超时）"></a>只用加减法（超时）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) <span class="keyword">return</span> INT_MAX;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> sign = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divd = __abs(dividend);</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divr = __abs(divisor);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(divd &gt;= divr)</div><div class="line">        &#123;</div><div class="line">            divd -= divr;</div><div class="line">            result++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sign * result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> copyed_value = value;</div><div class="line">        <span class="keyword">return</span> (copyed_value &gt; <span class="number">0x80000000</span>) ? -value : copyed_value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="加入位运算"><a href="#加入位运算" class="headerlink" title="加入位运算"></a>加入位运算</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) <span class="keyword">return</span> INT_MAX;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> sign = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divd = __abs(dividend);</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divr = __abs(divisor);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(divd &gt;= divr)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> temp = divr; <span class="keyword">unsigned</span> m = <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>((temp &lt;&lt; <span class="number">1</span>) &lt;= divd &amp;&amp; temp != <span class="number">2147483648</span>)</div><div class="line">            &#123;</div><div class="line">                temp &lt;&lt;= <span class="number">1</span>;</div><div class="line">                m &lt;&lt;= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            divd -= temp;</div><div class="line">            result += m;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sign * result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> copyed_value = value;</div><div class="line">        <span class="keyword">return</span> (copyed_value &gt; <span class="number">0x80000000</span>) ? -value : copyed_value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="对数求解"><a href="#对数求解" class="headerlink" title="对数求解"></a>对数求解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) <span class="keyword">return</span> INT_MAX;</div><div class="line">        <span class="keyword">if</span>(dividend == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> sign = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divd = __abs(dividend);</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divr = __abs(divisor);</div><div class="line">        </div><div class="line">        result = <span class="built_in">exp</span>(<span class="built_in">log</span>(divd)-<span class="built_in">log</span>(divr));</div><div class="line">        <span class="keyword">return</span> sign * result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> copyed_value = value;</div><div class="line">        <span class="keyword">return</span> (copyed_value &gt; <span class="number">0x80000000</span>) ? -value : copyed_value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wuyujie.top/2019/04/21/hello-world/"/>
    <id>http://wuyujie.top/2019/04/21/hello-world/</id>
    <published>2019-04-21T13:04:23.095Z</published>
    <updated>2017-09-21T16:39:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四周LeetCode</title>
    <link href="http://wuyujie.top/2019/04/18/%E7%AC%AC%E5%9B%9B%E5%91%A8LeetCode/"/>
    <id>http://wuyujie.top/2019/04/18/第四周LeetCode/</id>
    <published>2019-04-18T05:13:11.000Z</published>
    <updated>2019-04-18T05:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四周LeetCode刷题记录"><a href="#第四周LeetCode刷题记录" class="headerlink" title="第四周LeetCode刷题记录"></a>第四周LeetCode刷题记录</h2><a id="more"></a><ol><li><a href="http://wuyunjie.top/2019/04/14/LeetCode-20-Valid-Parentheses/" title="LeetCode--20. Valid Parentheses" target="_blank" rel="external">LeetCode—20. Valid Parentheses</a></li><li><a href="http://wuyunjie.top/2019/04/14/LeetCode-21-Merge-Two-Sorted-Lists/" title="LeetCode--21. Merge Two Sorted Lists" target="_blank" rel="external">LeetCode—21. Merge Two Sorted Lists</a></li><li><a href="http://wuyunjie.top/2019/04/14/LeetCode-22-Generate-Parentheses/" title="LeetCode--22. Generate Parentheses" target="_blank" rel="external">LeetCode—22. Generate Parentheses</a></li><li><a href="http://wuyunjie.top/2019/04/16/LeetCode-23-Merge-k-Sorted-Lists/" title="LeetCode--23. Merge k Sorted Lists" target="_blank" rel="external">LeetCode—23. Merge k Sorted Lists</a></li><li><a href="http://wuyunjie.top/2019/04/16/LeetCode-24-Swap-Nodes-in-Pairs/" title="LeetCode--24. Swap Nodes in Pairs" target="_blank" rel="external">LeetCode—24. Swap Nodes in Pairs</a></li><li><a href="http://wuyunjie.top/2019/04/16/LeetCode-25-Reverse-Nodes-in-k-Group/" title="LeetCode--25. Reverse Nodes in k-Group" target="_blank" rel="external">LeetCode—25. Reverse Nodes in k-Group</a></li><li><a href="http://wuyunjie.top/2019/04/17/LeetCode-26-Remove-Duplicates-from-Sorted-Array/" title="LeetCode--26. Remove Duplicates from Sorted Array" target="_blank" rel="external">LeetCode—26. Remove Duplicates from Sorted Array</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第四周LeetCode刷题记录&quot;&gt;&lt;a href=&quot;#第四周LeetCode刷题记录&quot; class=&quot;headerlink&quot; title=&quot;第四周LeetCode刷题记录&quot;&gt;&lt;/a&gt;第四周LeetCode刷题记录&lt;/h2&gt;
    
    </summary>
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/categories/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/tags/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--28. Implement strStr()</title>
    <link href="http://wuyujie.top/2019/04/17/LeetCode-28-Implement-strStr/"/>
    <id>http://wuyujie.top/2019/04/17/LeetCode-28-Implement-strStr/</id>
    <published>2019-04-17T08:51:25.000Z</published>
    <updated>2019-04-17T09:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Implement strStr().<br><a id="more"></a><br>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: haystack = “hello”, needle = “ll”<br>Output: 2</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: haystack = “aaaaa”, needle = “bba”<br>Output: -1</p></blockquote><p><strong>Clarification :</strong></p><blockquote><p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p><p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这个题要求实现strStr()函数。实际上就是个字符串匹配过程，要求从haystack中寻找子串needle，若找到，返回子串开始位置；否知返回-1.</p><p>想到的有两种解法，一种是直接暴力求解，另一种是用KMP算法。</p><p>首先实现了暴力求解的算法。将haystack所有与needle一样长的子串进行比较，若成功找到，就返回当前子串其实位置；若最终未找到，返回-1.这种方法实现后，发现效果还算不错，没有想象的那么差。</p><p>之后实现了KMP算法，KMP算法可以利用next数组加速匹配过程。</p><blockquote><p>假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置</p><ul><li>如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</li><li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值.</li></ul></blockquote><p>这里重点是构造next数组，next数组各值的含义：代表当前字符之前的字符串中，有多大长度的相同前缀后缀。例如如果next[j] = k，代表j 之前的字符串中有最大长度为k 的相同前缀。</p><p>参考文献：<br>[1] <a href="https://www.cnblogs.com/yjiyjige/p/3263858.html" target="_blank" rel="external">（原创）详解KMP算法</a><br>[2] <a href="https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html" target="_blank" rel="external">很详尽KMP算法</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="暴力算法1"><a href="#暴力算法1" class="headerlink" title="暴力算法1"></a>暴力算法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = haystack.size(), n = needle.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m - n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (j == n) &#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="暴力算法2"><a href="#暴力算法2" class="headerlink" title="暴力算法2"></a>暴力算法2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = haystack.size(), n = needle.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m - n; i++) &#123;</div><div class="line">            <span class="built_in">string</span> substr = haystack.substr(i, n);</div><div class="line">            <span class="keyword">if</span> (substr == needle) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_KMP_Next(<span class="built_in">string</span> s)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next(s.length());</div><div class="line">        next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>, k=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(j &lt; s.length()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(k == <span class="number">-1</span> || s[j] == s[k])</div><div class="line">            &#123;</div><div class="line">                next[++j] = ++k;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                k = next[k];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = haystack.length(), n = needle.length();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = get_KMP_Next(needle);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span> || haystack[i] == needle[j])</div><div class="line">            &#123;</div><div class="line">                i++;j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                j = next[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(j == needle.length())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> i-j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Implement strStr().&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--27. Remove Element</title>
    <link href="http://wuyujie.top/2019/04/17/LeetCode-27-Remove-Element/"/>
    <id>http://wuyujie.top/2019/04/17/LeetCode-27-Remove-Element/</id>
    <published>2019-04-17T08:07:58.000Z</published>
    <updated>2019-04-17T08:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given an array <strong>nums</strong> and a value <strong>val</strong>, remove all instances of that value in-place and return the new length.<br><a id="more"></a><br>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Given nums = [3,2,2,3], val = 3,</p><p>Your function should return length = 2, with the first two elements of nums being 2.</p><p>It doesn’t matter what you leave beyond the returned length.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Given nums = [0,1,2,2,3,0,4,2], val = 2,</p><p>Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</p><p>Note that the order of those five elements can be arbitrary.</p><p>It doesn’t matter what values are set beyond the returned length.</p></blockquote><p><strong>Clarification :</strong></p><blockquote><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// nums is passed in by reference. (i.e., without making a copy)</div><div class="line">int len = removeElement(nums, val);</div><div class="line"></div><div class="line">// any modification to nums in your function would be known by the caller.</div><div class="line">// using the length returned by your function, it prints the first len elements.</div><div class="line">for (int i = 0; i &lt; len; i++) &#123;</div><div class="line">    print(nums[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题与上一题类似，不够这次要求删除数组中指定的值。思想还是一样的：</p><blockquote><p>设置一个有效位last，遍历数组，遇到不等于val的值，就将它移动到last+1，然后更新last<br>当遍历完数组后，不等于val的值就都移动到了数组前端有效部分。</p></blockquote><p>但是这样会移动大量的元素，考虑是不是可以只移动值等于val的元素，由于数组的顺序可以改变，那么我们可以:</p><blockquote><p>将等于val的元素与最后一个值不等于val的元素交换</p></blockquote><p>这样当遍历完成后，所有等于val的值都被移动到了数组末尾无效部分。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.empty())    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> last=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.size();j++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[j]!=val)    nums[last++]=nums[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.empty())    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt;= end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] == val)</div><div class="line">            &#123;</div><div class="line">                nums[i] = nums[end--];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ++end;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;strong&gt;nums&lt;/strong&gt; and a value &lt;strong&gt;val&lt;/strong&gt;, remove all instances of that value in-place and return the new length.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--26. Remove Duplicates from Sorted Array</title>
    <link href="http://wuyujie.top/2019/04/17/LeetCode-26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://wuyujie.top/2019/04/17/LeetCode-26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2019-04-17T07:25:04.000Z</published>
    <updated>2019-04-17T08:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a sorted array nums, remove the duplicates <strong>in-place</strong> such that each element appear only once and return the new length.<br><a id="more"></a><br>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Given nums = [1,1,2],</p><p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</p><p>It doesn’t matter what you leave beyond the returned length.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Given nums = [0,0,1,1,1,2,2,3,3,4],</p><p>Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</p><p>It doesn’t matter what values are set beyond the returned length.</p></blockquote><p><strong>Clarification :</strong></p><blockquote><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// nums is passed in by reference. (i.e., without making a copy)</div><div class="line">int len = removeDuplicates(nums);</div><div class="line"></div><div class="line">// any modification to nums in your function would be known by the caller.</div><div class="line">// using the length returned by your function, it prints the first len elements.</div><div class="line">for (int i = 0; i &lt; len; i++) &#123;</div><div class="line">    print(nums[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题要求去除数字中的冗余项，而且只能使用O(1)的空间复杂度。看题目说明得知，我们返回的是处理后数组的长度，我们只需要保证数组前面有效部分的值，至于超出有效部分的值我们无需关心。</p><p>那么就可以很好处理，我们继续下当前最后一个有效位的位置，等到下一次遇到不重复的数时，将该数字移动到下一个有效位，然后更新有效位继续扫描数组。当完成一遍扫描后，所有不重复的值都移动到了数组的前端有效部分。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> last=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] != nums[last<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                nums[last] = nums[i];</div><div class="line">                last++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a sorted array nums, remove the duplicates &lt;strong&gt;in-place&lt;/strong&gt; such that each element appear only once and return the new length.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--25. Reverse Nodes in k-Group</title>
    <link href="http://wuyujie.top/2019/04/16/LeetCode-25-Reverse-Nodes-in-k-Group/"/>
    <id>http://wuyujie.top/2019/04/16/LeetCode-25-Reverse-Nodes-in-k-Group/</id>
    <published>2019-04-16T07:13:58.000Z</published>
    <updated>2019-04-16T07:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.<br><a id="more"></a><br>k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given this linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5</p><p>For k = 2, you should return: 2-&gt;1-&gt;4-&gt;3-&gt;5</p><p>For k = 3, you should return: 3-&gt;2-&gt;1-&gt;4-&gt;5</p></blockquote><p><strong>Note :</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题又是对上一题的推广，leetcode这种由简入难的题挺多的。这次是要求对链表的K个结点反转，这里的K可以是任意的。我们可以依旧按照上一题的那种方式，将链表分为若干段：每次从链表上“摘下”k个结点的链表，把这个链表进行反转后，再放回原来的位置。对于链表的反转操作，我们可以利用构建链表时用的头插法来进行。这里在解决时碰到几个问题：</p><blockquote><ol><li>若剩下链表长度不够K时，我们不需要对这段链表进行反转，所以我们需要提前计算出链表的长度</li><li>需要记录下反转后的最后一个结点，用于在放回原链表时，可以和下一段连接起来。</li></ol></blockquote><p>还有一种方法，实现如下，这种方法思想上大致相同，这种方法不用单独计算链表长度，而是边计算长度边处理链表，每当数到k个结点时就反转一次。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        dummy.next = <span class="literal">NULL</span>;</div><div class="line">        ListNode* count = head;</div><div class="line">        <span class="keyword">int</span> Len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(count)</div><div class="line">        &#123;</div><div class="line">            count=count-&gt;next;</div><div class="line">            Len++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode* pre = &amp;dummy;</div><div class="line">        ListNode* last = head;</div><div class="line">        ListNode* temp = last;</div><div class="line">        ListNode* next;</div><div class="line">        <span class="keyword">while</span>(Len &gt;= k)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//下一个待取的结点</span></div><div class="line">                next = temp-&gt;next;</div><div class="line">                <span class="comment">//插入头部</span></div><div class="line">                temp-&gt;next = pre-&gt;next;</div><div class="line">                pre-&gt;next = temp;</div><div class="line">                temp = next;</div><div class="line">            &#125;</div><div class="line">            pre = last;last=next;</div><div class="line">            Len-=k;</div><div class="line">        &#125;</div><div class="line">        pre-&gt;next = last;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!head || k == <span class="number">1</span>) <span class="keyword">return</span> head;</div><div class="line">        ListNode *dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *pre = dummy, *cur = head;</div><div class="line">        dummy-&gt;next = head;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; cur; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (i % k == <span class="number">0</span>) &#123;</div><div class="line">                pre = reverseOneGroup(pre, cur-&gt;next);</div><div class="line">                cur = pre-&gt;next;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                cur = cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="function">ListNode* <span class="title">reverseOneGroup</span><span class="params">(ListNode* pre, ListNode* next)</span> </span>&#123;</div><div class="line">        ListNode *last = pre-&gt;next, *cur = last-&gt;next;</div><div class="line">        <span class="keyword">while</span>(cur != next) &#123;</div><div class="line">            last-&gt;next = cur-&gt;next;</div><div class="line">            cur-&gt;next = pre-&gt;next;</div><div class="line">            pre-&gt;next = cur;</div><div class="line">            cur = last-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--24. Swap Nodes in Pairs</title>
    <link href="http://wuyujie.top/2019/04/16/LeetCode-24-Swap-Nodes-in-Pairs/"/>
    <id>http://wuyujie.top/2019/04/16/LeetCode-24-Swap-Nodes-in-Pairs/</id>
    <published>2019-04-16T06:42:08.000Z</published>
    <updated>2019-04-16T07:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a linked list, swap every two adjacent nodes and return its head.<br><a id="more"></a><br>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>要求交换链表中相邻两个结点的位置，并且要求不能修改结点的值，也就是只能将结点整个交换过去。我的思路很简单，从链表上依次“摘下”两个结点，交换其位置后再将得到的结果拼接回链表，题目并不难，主要是对链表的操作。可以按下面的图来表示(图参考自<a href="https://leetcode.com/problems/swap-nodes-in-pairs/discuss/11183/C%2B%2B-solution-with-graph-explanation." title="C++ solution with graph explanation." target="_blank" rel="external">C++ solution with graph explanation.</a>)<br>/*</p><pre><code>   node1 = pre-&gt;next;node2 = node1-&gt;next   #----&gt;@----&gt;@----&gt;@----&gt;@----&gt;@----&gt;@               ^     ^     ^               pre   node1 node2  1. pre-&gt;next = node2                __________               /          \   #----&gt;@----&gt;@     @----&gt;@----&gt;@----&gt;@               ^     ^     ^               pre   node1 node2  2. node1-&gt;next = node2-&gt;next                __________               /          \   #----&gt;@----&gt;@     @     @----&gt;@----&gt;@                      \_________/               ^     ^     ^               pre   node1 node2  3. node2-&gt;next = node1               __________              /          \  #----&gt;@----&gt;@     @&lt;----@     @----&gt;@                     \_________/              ^     ^     ^              pre   node1 node2  4. pre = node1;               __________              /          \  #----&gt;@----&gt;@     @&lt;----@     @----&gt;@                     \_________/                    ^                    pre</code></pre><p> */</p><p>同样的思想也可以用递归来实现</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        dummy.next = head;</div><div class="line">        ListNode *pre = &amp;dummy;</div><div class="line">        ListNode *node1,*node2;</div><div class="line">        <span class="keyword">while</span>(pre)</div><div class="line">        &#123;</div><div class="line">            node1 = pre-&gt;next;</div><div class="line">            <span class="keyword">if</span>(node1&amp;&amp;node1-&gt;next)</div><div class="line">            &#123;</div><div class="line">                node2 = node1-&gt;next;</div><div class="line">                pre-&gt;next = node2;</div><div class="line">                node1-&gt;next = node2-&gt;next;</div><div class="line">                node2-&gt;next = node1;</div><div class="line">            &#125;</div><div class="line">            pre = node1;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!head || !(head-&gt;next))</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        ListNode *res = head-&gt;next;</div><div class="line">        head-&gt;next = swapPairs(res-&gt;next);</div><div class="line">        res-&gt;next = head;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--23. Merge k Sorted Lists</title>
    <link href="http://wuyujie.top/2019/04/16/LeetCode-23-Merge-k-Sorted-Lists/"/>
    <id>http://wuyujie.top/2019/04/16/LeetCode-23-Merge-k-Sorted-Lists/</id>
    <published>2019-04-16T05:28:44.000Z</published>
    <updated>2019-04-16T06:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.<br><a id="more"></a></p></blockquote><p><strong>Example :</strong></p><blockquote><p>Input:<br>[<br> 1-&gt;4-&gt;5,<br> 1-&gt;3-&gt;4,<br> 2-&gt;6<br>]<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>前面有一题是合并两个有序的链表，这道题就相当于进一步泛化。</p><p>考虑到我们已经有了合并两个链表的方法，那么我们就可以把这个问题分解。每次把链表数组中的两个链表合并，直到只剩下一个链表为之。这时这个剩下的链表就是我们需要的结果。实现后的确解决了问题，但是效率不高。</p><p>进一步思考，既然合并链表的过程都是类似的，那么是不是可以用分治来做，将合并K个链表分解为合并两个子问题的结果——合并K/2个链表。这样逐步分解下去，可以划分为许多更容易解决的子问题。结合递归实现后，效率得到了极大提升，分治算法的思想果然厉害。细想起来，归并排序的思想似乎也是这样。</p><p>在题解中发现还有一种有意思的解法，使用priority_queue求解。由priority_queue的特性，我们可以设置在队列头部总是一个值最小的结点，那么我们就可以把所有链表第一个结点输入这个队列中。每次从队列得到最小的结点放入新链表，将该节点对应链表的下一个结点放入队列。这个重复不断进行，最终可以得到一个新的有序链表。这时候的priority_queue其实相当于一个小顶堆。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="逐一合并"><a href="#逐一合并" class="headerlink" title="逐一合并"></a>逐一合并</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(INT_MIN)</span></span>;</div><div class="line">        ListNode *tail = &amp;dummy;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            tail = tail-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tail-&gt;next = l1 ? l1 : l2;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</div><div class="line">        ListNode* newList = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(lists.size() &gt;= <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(lists.size() == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                newList = lists.back();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ListNode* list1 = lists.back();</div><div class="line">                lists.pop_back();</div><div class="line">                ListNode* list2 = lists.back();</div><div class="line">                lists.pop_back();</div><div class="line">                newList = mergeTwoLists(list1,list2);</div><div class="line">                lists.push_back(newList);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> newList;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(INT_MIN)</span></span>;</div><div class="line">        ListNode *tail = &amp;dummy;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            tail = tail-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tail-&gt;next = l1 ? l1 : l2;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">ListNode* <span class="title">mergeKL</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(end - begin == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> mergeTwoLists(lists[begin],lists[end]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(end == begin) <span class="keyword">return</span> lists[begin];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(end &lt; begin) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (begin+end)/<span class="number">2</span>;</div><div class="line">            ListNode* list1 = mergeKL(lists, begin, mid);</div><div class="line">            ListNode* list2 = mergeKL(lists, mid+<span class="number">1</span>, end);</div><div class="line">            <span class="keyword">return</span> mergeTwoLists(list1, list2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mergeKL(lists, <span class="number">0</span>, lists.size()<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="priority-queue解法"><a href="#priority-queue解法" class="headerlink" title="priority_queue解法"></a>priority_queue解法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</div><div class="line">        auto cmp=[](ListNode* a, ListNode* b) </div><div class="line">        &#123;</div><div class="line">            return a-&gt;val &gt; b-&gt;val;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        priority_queue&lt;ListNode*,vector&lt;ListNode*&gt;,decltype(cmp)&gt; pq(cmp);</div><div class="line">        ListNode dummy(0),*p=&amp;dummy;</div><div class="line">        </div><div class="line">        for (ListNode *node:lists) if (node) pq.push(node);</div><div class="line">        </div><div class="line">        while (!pq.empty()) </div><div class="line">        &#123;</div><div class="line">            if (pq.top()-&gt;next) pq.push(pq.top()-&gt;next);</div><div class="line">            p-&gt;next=pq.top();</div><div class="line">            pq.pop();</div><div class="line">            p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--22. Generate Parentheses</title>
    <link href="http://wuyujie.top/2019/04/14/LeetCode-22-Generate-Parentheses/"/>
    <id>http://wuyujie.top/2019/04/14/LeetCode-22-Generate-Parentheses/</id>
    <published>2019-04-14T06:12:46.000Z</published>
    <updated>2019-04-14T07:07:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<br><a id="more"></a><br>For example, given n = 3, a solution set is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &quot;((()))&quot;,</div><div class="line">    &quot;(()())&quot;,</div><div class="line">    &quot;(())()&quot;,</div><div class="line">    &quot;()(())&quot;,</div><div class="line">    &quot;()()()&quot;</div><div class="line">]</div></pre></td></tr></table></figure></p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>以前做过类似的题，也就是求一组数字可以通过栈得到的所有合法排序。当时的做法是，先求出所有可能的排序，然后判断每一种排序的合法性。获取全排序可以通过函数next_permutation()做到：</p><blockquote><p>C++ STL中提供了std::next_permutation与std::prev_permutation可以获取数字或者是字符的全排列，其中std::next_permutation提供升序、std::prev_permutation提供降序。</p></blockquote><p>所以结合前面有一题判断括号是否有效。最开始的想法是将括号全排序后，找到有效的括号排列，放入结果集。遍历完所有可能后，就可以找到最终的结果了。</p><p>但是这种方法效率很低。另一种方法是，使用递归回溯，每次生成合法的括号序列加入结果集中，这种方法避免了生成无效排序。</p><blockquote><p>长度为 n 的序列就是 ‘(‘ 加上所有长度为 n-1 的序列，以及 ‘)’ 加上所有长度为 n-1 的序列。只有在保证序列仍然保持有效时才添加 ‘(‘ or ‘)’，我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点，如果我们还剩一个位置，我们可以开始放一个左括号。 如果它不超过左括号的数量，我们可以放一个右括号。</p></blockquote><p>还有一种方法，LeetCode上称之为Closure number，但感觉很像分治。我们可以把一个合法的括号字符串看做一个闭包，它必然起于左括号止于右括号，且每个合法括号串都可以从某个位置分为两个同样合法的括号串（包括空串），因此对于给定的n所可能构造的所有括号串都可以一步步划分为两个子闭包并解构（去掉头尾的一对左右括号）直到最小闭包——空串为止。基于以上分析，我们就可以从空串开始逆向一步步对两个子闭包之一构造新的闭包（在头尾各添加一个左/右括号）然后合并。这种方法还不是特别懂，只是跟着算法用c++重写了一遍。</p><p>参考文献：<br>[1] <a href="https://www.cnblogs.com/aiguona/p/7304945.html" title="C++ STL 全排列函数详解" target="_blank" rel="external">C++ STL 全排列函数详解</a><br>[2] <a href="https://blog.csdn.net/weixin_34216107/article/details/86906251" title="LeetCode Record C++" target="_blank" rel="external">LeetCode Record C++</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="全排序后筛选"><a href="#全排序后筛选" class="headerlink" title="全排序后筛选"></a>全排序后筛选</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; brackets;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">')'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'('</span>)</div><div class="line">                &#123;</div><div class="line">                    brackets.pop();</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> brackets.push(s[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(brackets.empty()) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> parentheses = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) parentheses+=<span class="string">"()"</span>;</div><div class="line">        </div><div class="line">        sort(parentheses.begin(), parentheses.end());</div><div class="line">        result.push_back(parentheses);</div><div class="line">        <span class="keyword">while</span>(next_permutation(parentheses.begin(), parentheses.end()))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(isValid(parentheses)) result.push_back(parentheses);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; result, <span class="built_in">string</span> cur, <span class="keyword">int</span> open, <span class="keyword">int</span> close, <span class="keyword">int</span> max)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(cur.length() == max*<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            result.push_back(cur);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(open &lt; max)</div><div class="line">        &#123;</div><div class="line">            backtrack(result, cur+<span class="string">"("</span>, open+<span class="number">1</span>, close, max);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(close &lt; open)</div><div class="line">        &#123;</div><div class="line">            backtrack(result, cur+<span class="string">")"</span>, open, close+<span class="number">1</span>, max);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        backtrack(result, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>, n);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="闭包数"><a href="#闭包数" class="headerlink" title="闭包数"></a>闭包数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            result.push_back(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; n; c++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> left:generateParenthesis(c))</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> right:generateParenthesis(n<span class="number">-1</span>-c))</div><div class="line">                        result.push_back(<span class="string">"("</span>+left+<span class="string">")"</span>+right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--21. Merge Two Sorted Lists</title>
    <link href="http://wuyujie.top/2019/04/14/LeetCode-21-Merge-Two-Sorted-Lists/"/>
    <id>http://wuyujie.top/2019/04/14/LeetCode-21-Merge-Two-Sorted-Lists/</id>
    <published>2019-04-14T05:49:08.000Z</published>
    <updated>2019-04-14T06:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.<br><a id="more"></a><br>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>要求合并两个有序链表，新链表是由两个链表结点拼接得到，考察的是对链表的操作。思想是，每次从两个链表上取下一个结点，比较值的大小，较小的结点拼接到新链表后，较大的结点继续进行下一次比较。</p><p>这里需要注意的是链表边界的处理，比如对链表头结点的处理方式。可以先单独处理两个链表头结点，确定下新链表的头结点后，再继续继续下面的处理。也可以重新定义一个新的头结点，把链表结点都当做普通结点处理。最后可能有一个链表还有剩余的结点，直接将这些结点拼接到新链表末尾即可。</p><p>还可以使用递归的方式求解，但是递归的缺点是，若链表过长，可能会溢出。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span> || l2 == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> l1 == <span class="literal">NULL</span>? l2 : l1;</div><div class="line">        </div><div class="line">        ListNode* resHead = l1-&gt;val &lt; l2-&gt;val?l1 : l2;</div><div class="line">        ListNode* cur = resHead;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val) l1=l1-&gt;next;</div><div class="line">        <span class="keyword">else</span> l2=l2-&gt;next;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span> &amp;&amp; l2!=<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                cur-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                cur-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            cur = cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        cur-&gt;next = l1==<span class="literal">NULL</span>?l2:l1;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> resHead;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="定义新的头结点dummy"><a href="#定义新的头结点dummy" class="headerlink" title="定义新的头结点dummy"></a>定义新的头结点dummy</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(INT_MIN)</span></span>;</div><div class="line">        ListNode *tail = &amp;dummy;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</div><div class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class="line">                tail-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                tail-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            tail = tail-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tail-&gt;next = l1 ? l1 : l2;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span> || l2 == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> l1 == <span class="literal">NULL</span>? l2 : l1;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</div><div class="line">            <span class="keyword">return</span> l1;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            l2-&gt;next = mergeTwoLists(l2-&gt;next, l1);</div><div class="line">            <span class="keyword">return</span> l2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--20. Valid Parentheses</title>
    <link href="http://wuyujie.top/2019/04/14/LeetCode-20-Valid-Parentheses/"/>
    <id>http://wuyujie.top/2019/04/14/LeetCode-20-Valid-Parentheses/</id>
    <published>2019-04-14T03:29:05.000Z</published>
    <updated>2019-04-14T05:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.<br><a id="more"></a><br>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: “()”<br>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: “()[]{}”<br>Output: true</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: “(]”<br>Output: false</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input: “([)]”<br>Output: false</p></blockquote><p><strong>Example 5:</strong></p><blockquote><p>Input: “{[]}”<br>Output: true</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题很经典，也就是让我们判断给定的括号字符串是不是合法的，考察的应该是栈的运用。通过栈就可以很容易的解决问题，遍历字符串：</p><blockquote><ol><li>若遍历到是左括号<code>&#39;(&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;[&#39;</code>，将其推入栈中；</li><li>若遇到的是右括号，在栈顶找是否有匹配的左括号：若匹配成功，将栈顶弹出，继续遍历；若匹配失败，代表括号不合法，返回false.</li><li>遍历完字符串后，检查栈是否为空，若不空，代表不合法。</li></ol></blockquote><p>评论区有一种不使用stack的解法，它是直接在原字符串上模拟一个栈，保证只有左括号在栈内。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="使用stack"><a href="#使用stack" class="headerlink" title="使用stack"></a>使用stack</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; brackets;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">switch</span>(s[i])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</div><div class="line">                    <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'('</span>)</div><div class="line">                    &#123;</div><div class="line">                        brackets.pop();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>:</div><div class="line">                    <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'&#123;'</span>)</div><div class="line">                    &#123;</div><div class="line">                        brackets.pop();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">']'</span>:</div><div class="line">                    <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'['</span>)</div><div class="line">                    &#123;</div><div class="line">                        brackets.pop();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    brackets.push(s[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(brackets.empty()) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="不使用stack"><a href="#不使用stack" class="headerlink" title="不使用stack"></a>不使用stack</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> top = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;s.length();++i)&#123;</div><div class="line">            <span class="keyword">if</span>(top&lt;<span class="number">0</span> || !isMatch(s[top], s[i]))&#123;</div><div class="line">                ++top;</div><div class="line">                s[top] = s[i];</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                --top;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> top == <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">char</span> c1, <span class="keyword">char</span> c2)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(c1 == <span class="string">'('</span> &amp;&amp; c2 == <span class="string">')'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(c1 == <span class="string">'['</span> &amp;&amp; c2 == <span class="string">']'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(c1 == <span class="string">'&#123;'</span> &amp;&amp; c2 == <span class="string">'&#125;'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>第三周LeetCode</title>
    <link href="http://wuyujie.top/2019/04/11/%E7%AC%AC%E4%B8%89%E5%91%A8LeetCode/"/>
    <id>http://wuyujie.top/2019/04/11/第三周LeetCode/</id>
    <published>2019-04-11T05:41:57.000Z</published>
    <updated>2019-04-18T05:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三周LeetCode刷题记录"><a href="#第三周LeetCode刷题记录" class="headerlink" title="第三周LeetCode刷题记录"></a>第三周LeetCode刷题记录</h2><a id="more"></a><ol><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-10-Regular-Expression-Matching/" title="LeetCode--10. Regular Expression Matching" target="_blank" rel="external">LeetCode—10. Regular Expression Matching</a></li><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-13-Roman-to-Integer/" title="LeetCode--13. Roman to Integer" target="_blank" rel="external">LeetCode—13. Roman to Integer</a></li><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-14-Longest-Common-Prefix/" title="LeetCode--14. Longest Common Prefix" target="_blank" rel="external">LeetCode—14. Longest Common Prefix</a></li><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-15-3Sum/" title="LeetCode--15. 3Sum" target="_blank" rel="external">LeetCode—15. 3Sum</a></li><li><a href="http://wuyunjie.top/2019/04/09/LeetCode-16-3Sum-Closest/" title="LeetCode--16. 3Sum Closest" target="_blank" rel="external">LeetCode—16. 3Sum Closest</a></li><li><a href="http://wuyunjie.top/2019/04/10/LeetCode-17-Letter-Combinations-of-a-Phone-Number/" title="LeetCode--17. Letter Combinations of a Phone Number" target="_blank" rel="external">LeetCode—17. Letter Combinations of a Phone Number</a></li><li><a href="http://wuyunjie.top/2019/04/10/LeetCode-18-4Sum/" title="LeetCode--18. 4Sum" target="_blank" rel="external">LeetCode—18. 4Sum</a></li><li><a href="http://wuyunjie.top/2019/04/11/LeetCode-19-Remove-Nth-Node-From-End-of-List/" title="LeetCode--19. Remove Nth Node From End of List" target="_blank" rel="external">LeetCode—19. Remove Nth Node From End of List</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第三周LeetCode刷题记录&quot;&gt;&lt;a href=&quot;#第三周LeetCode刷题记录&quot; class=&quot;headerlink&quot; title=&quot;第三周LeetCode刷题记录&quot;&gt;&lt;/a&gt;第三周LeetCode刷题记录&lt;/h2&gt;
    
    </summary>
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/categories/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/tags/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
</feed>
