<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WuYJ&#39;s Blog</title>
  
  <subtitle>HELLO WORLD</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyujie.top/"/>
  <updated>2019-04-22T07:11:08.539Z</updated>
  <id>http://wuyujie.top/</id>
  
  <author>
    <name>Wuyunjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode--29. Divide Two Integers</title>
    <link href="http://wuyujie.top/2019/04/22/LeetCode-29-Divide-Two-Integers/"/>
    <id>http://wuyujie.top/2019/04/22/LeetCode-29-Divide-Two-Integers/</id>
    <published>2019-04-22T05:54:54.000Z</published>
    <updated>2019-04-22T07:11:08.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.<br><a id="more"></a><br>Return the quotient after dividing <strong>dividend</strong> by <strong>divisor</strong>.</p><p>The integer division should truncate toward zero.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: dividend = 10, divisor = 3<br>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: dividend = 7, divisor = -3<br>Output: -2</p></blockquote><p><strong>Note :</strong></p><blockquote><ul><li>Both dividend and divisor will be 32-bit signed integers.</li><li>The divisor will never be 0.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 2^31 − 1 when the division result overflows.</li></ul></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目要求实现除法，并且不能使用乘法、除法和模这些操作。这就意味着我们只能使用加减或者位运算，来实现除法的过程。</p><p>第一种思路是，用被除数减去除数，知道被除数小于除数时，返回减法进行的次数。</p><p>这需要先对输入的两个数进行处理，若除数或被除数是负数，不能直接进行减法，需要先取他们的绝对值。但这是会出现越界的情况，如-2^31的绝对值就越界了，int不能存储。但是题目要求的是只能用32-bit的环境，所以不能用long来解决了，这里想到的是使用unsigned int来保存绝对值结果。这时又碰到了另一个问题，abs()函数也无法处理越界的数，即求abs(-2^31)时会报错，解决方法是使用labs()函数，或者重写一个abs()，可以实现需要的_abs()如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp = value;</div><div class="line">    <span class="keyword">return</span> (temp &gt; <span class="number">0x80000000</span>) ? -value : temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>除此之外，还需要单独判断一种结果溢出的情况，也就是<code>dividend = -2^31，divisor = -1</code> 的情况，这时直接输出INT_MAX即可。</p><p>这种方法效率太低，最后超时了。在这种方法基础上可以进行优化。可以加入位运算，如果被除数大于除数，找到小于被除数的，且是除数2^n的最大的数，被除数减去该数，结果加上n后，重复上述操作，直到被除数小于除数为止。这里寻找这个符合条件的数时，就可以运用位运算。</p><p>还有一种比较有意思的解法，就是运用对数求解。首先分别求出被除数和除数的对数，算出它们的差后，将其作为指数，求 e 的指数结果。公式如下：<br>    a/b = e^(log(a) - log(b))<br>但是计算对数时，应该使用了除法/，所以可能违反了条件。</p><p>参考：<br><a href="https://blog.csdn.net/zephyr_be_brave/article/details/8722397" title="C++自己实现abs" target="_blank" rel="external">C++自己实现abs</a><br><a href="https://leetcode.com/problems/divide-two-integers/discuss/13407/C%2B%2B-bit-manipulations" title="C++ bit manipulations" target="_blank" rel="external">C++ bit manipulations</a><br><a href="https://leetcode.com/problems/divide-two-integers/discuss/13460/6-line-solution-C%2B%2B" title="6 line solution C++" target="_blank" rel="external">6 line solution C++</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="只用加减法（超时）"><a href="#只用加减法（超时）" class="headerlink" title="只用加减法（超时）"></a>只用加减法（超时）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) <span class="keyword">return</span> INT_MAX;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> sign = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divd = __abs(dividend);</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divr = __abs(divisor);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(divd &gt;= divr)</div><div class="line">        &#123;</div><div class="line">            divd -= divr;</div><div class="line">            result++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sign * result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> copyed_value = value;</div><div class="line">        <span class="keyword">return</span> (copyed_value &gt; <span class="number">0x80000000</span>) ? -value : copyed_value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="加入位运算"><a href="#加入位运算" class="headerlink" title="加入位运算"></a>加入位运算</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) <span class="keyword">return</span> INT_MAX;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> sign = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divd = __abs(dividend);</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divr = __abs(divisor);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(divd &gt;= divr)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> temp = divr; <span class="keyword">unsigned</span> m = <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>((temp &lt;&lt; <span class="number">1</span>) &lt;= divd &amp;&amp; temp != <span class="number">2147483648</span>)</div><div class="line">            &#123;</div><div class="line">                temp &lt;&lt;= <span class="number">1</span>;</div><div class="line">                m &lt;&lt;= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            divd -= temp;</div><div class="line">            result += m;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sign * result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> copyed_value = value;</div><div class="line">        <span class="keyword">return</span> (copyed_value &gt; <span class="number">0x80000000</span>) ? -value : copyed_value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="对数求解"><a href="#对数求解" class="headerlink" title="对数求解"></a>对数求解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) <span class="keyword">return</span> INT_MAX;</div><div class="line">        <span class="keyword">if</span>(dividend == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> sign = (dividend &gt; <span class="number">0</span>) ^ (divisor &gt; <span class="number">0</span>)? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divd = __abs(dividend);</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> divr = __abs(divisor);</div><div class="line">        </div><div class="line">        result = <span class="built_in">exp</span>(<span class="built_in">log</span>(divd)-<span class="built_in">log</span>(divr));</div><div class="line">        <span class="keyword">return</span> sign * result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> __abs(<span class="keyword">int</span> value)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> copyed_value = value;</div><div class="line">        <span class="keyword">return</span> (copyed_value &gt; <span class="number">0x80000000</span>) ? -value : copyed_value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wuyujie.top/2019/04/21/hello-world/"/>
    <id>http://wuyujie.top/2019/04/21/hello-world/</id>
    <published>2019-04-21T13:04:23.095Z</published>
    <updated>2017-09-21T16:39:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四周LeetCode</title>
    <link href="http://wuyujie.top/2019/04/18/%E7%AC%AC%E5%9B%9B%E5%91%A8LeetCode/"/>
    <id>http://wuyujie.top/2019/04/18/第四周LeetCode/</id>
    <published>2019-04-18T05:13:11.000Z</published>
    <updated>2019-04-18T05:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四周LeetCode刷题记录"><a href="#第四周LeetCode刷题记录" class="headerlink" title="第四周LeetCode刷题记录"></a>第四周LeetCode刷题记录</h2><a id="more"></a><ol><li><a href="http://wuyunjie.top/2019/04/14/LeetCode-20-Valid-Parentheses/" title="LeetCode--20. Valid Parentheses" target="_blank" rel="external">LeetCode—20. Valid Parentheses</a></li><li><a href="http://wuyunjie.top/2019/04/14/LeetCode-21-Merge-Two-Sorted-Lists/" title="LeetCode--21. Merge Two Sorted Lists" target="_blank" rel="external">LeetCode—21. Merge Two Sorted Lists</a></li><li><a href="http://wuyunjie.top/2019/04/14/LeetCode-22-Generate-Parentheses/" title="LeetCode--22. Generate Parentheses" target="_blank" rel="external">LeetCode—22. Generate Parentheses</a></li><li><a href="http://wuyunjie.top/2019/04/16/LeetCode-23-Merge-k-Sorted-Lists/" title="LeetCode--23. Merge k Sorted Lists" target="_blank" rel="external">LeetCode—23. Merge k Sorted Lists</a></li><li><a href="http://wuyunjie.top/2019/04/16/LeetCode-24-Swap-Nodes-in-Pairs/" title="LeetCode--24. Swap Nodes in Pairs" target="_blank" rel="external">LeetCode—24. Swap Nodes in Pairs</a></li><li><a href="http://wuyunjie.top/2019/04/16/LeetCode-25-Reverse-Nodes-in-k-Group/" title="LeetCode--25. Reverse Nodes in k-Group" target="_blank" rel="external">LeetCode—25. Reverse Nodes in k-Group</a></li><li><a href="http://wuyunjie.top/2019/04/17/LeetCode-26-Remove-Duplicates-from-Sorted-Array/" title="LeetCode--26. Remove Duplicates from Sorted Array" target="_blank" rel="external">LeetCode—26. Remove Duplicates from Sorted Array</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第四周LeetCode刷题记录&quot;&gt;&lt;a href=&quot;#第四周LeetCode刷题记录&quot; class=&quot;headerlink&quot; title=&quot;第四周LeetCode刷题记录&quot;&gt;&lt;/a&gt;第四周LeetCode刷题记录&lt;/h2&gt;
    
    </summary>
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/categories/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/tags/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--28. Implement strStr()</title>
    <link href="http://wuyujie.top/2019/04/17/LeetCode-28-Implement-strStr/"/>
    <id>http://wuyujie.top/2019/04/17/LeetCode-28-Implement-strStr/</id>
    <published>2019-04-17T08:51:25.000Z</published>
    <updated>2019-04-17T09:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Implement strStr().<br><a id="more"></a><br>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: haystack = “hello”, needle = “ll”<br>Output: 2</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: haystack = “aaaaa”, needle = “bba”<br>Output: -1</p></blockquote><p><strong>Clarification :</strong></p><blockquote><p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p><p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这个题要求实现strStr()函数。实际上就是个字符串匹配过程，要求从haystack中寻找子串needle，若找到，返回子串开始位置；否知返回-1.</p><p>想到的有两种解法，一种是直接暴力求解，另一种是用KMP算法。</p><p>首先实现了暴力求解的算法。将haystack所有与needle一样长的子串进行比较，若成功找到，就返回当前子串其实位置；若最终未找到，返回-1.这种方法实现后，发现效果还算不错，没有想象的那么差。</p><p>之后实现了KMP算法，KMP算法可以利用next数组加速匹配过程。</p><blockquote><p>假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置</p><ul><li>如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</li><li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值.</li></ul></blockquote><p>这里重点是构造next数组，next数组各值的含义：代表当前字符之前的字符串中，有多大长度的相同前缀后缀。例如如果next[j] = k，代表j 之前的字符串中有最大长度为k 的相同前缀。</p><p>参考文献：<br>[1] <a href="https://www.cnblogs.com/yjiyjige/p/3263858.html" target="_blank" rel="external">（原创）详解KMP算法</a><br>[2] <a href="https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html" target="_blank" rel="external">很详尽KMP算法</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="暴力算法1"><a href="#暴力算法1" class="headerlink" title="暴力算法1"></a>暴力算法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = haystack.size(), n = needle.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m - n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (j == n) &#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="暴力算法2"><a href="#暴力算法2" class="headerlink" title="暴力算法2"></a>暴力算法2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = haystack.size(), n = needle.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m - n; i++) &#123;</div><div class="line">            <span class="built_in">string</span> substr = haystack.substr(i, n);</div><div class="line">            <span class="keyword">if</span> (substr == needle) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_KMP_Next(<span class="built_in">string</span> s)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next(s.length());</div><div class="line">        next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>, k=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(j &lt; s.length()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(k == <span class="number">-1</span> || s[j] == s[k])</div><div class="line">            &#123;</div><div class="line">                next[++j] = ++k;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                k = next[k];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = haystack.length(), n = needle.length();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = get_KMP_Next(needle);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span> || haystack[i] == needle[j])</div><div class="line">            &#123;</div><div class="line">                i++;j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                j = next[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(j == needle.length())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> i-j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Implement strStr().&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--27. Remove Element</title>
    <link href="http://wuyujie.top/2019/04/17/LeetCode-27-Remove-Element/"/>
    <id>http://wuyujie.top/2019/04/17/LeetCode-27-Remove-Element/</id>
    <published>2019-04-17T08:07:58.000Z</published>
    <updated>2019-04-17T08:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given an array <strong>nums</strong> and a value <strong>val</strong>, remove all instances of that value in-place and return the new length.<br><a id="more"></a><br>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Given nums = [3,2,2,3], val = 3,</p><p>Your function should return length = 2, with the first two elements of nums being 2.</p><p>It doesn’t matter what you leave beyond the returned length.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Given nums = [0,1,2,2,3,0,4,2], val = 2,</p><p>Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</p><p>Note that the order of those five elements can be arbitrary.</p><p>It doesn’t matter what values are set beyond the returned length.</p></blockquote><p><strong>Clarification :</strong></p><blockquote><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// nums is passed in by reference. (i.e., without making a copy)</div><div class="line">int len = removeElement(nums, val);</div><div class="line"></div><div class="line">// any modification to nums in your function would be known by the caller.</div><div class="line">// using the length returned by your function, it prints the first len elements.</div><div class="line">for (int i = 0; i &lt; len; i++) &#123;</div><div class="line">    print(nums[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题与上一题类似，不够这次要求删除数组中指定的值。思想还是一样的：</p><blockquote><p>设置一个有效位last，遍历数组，遇到不等于val的值，就将它移动到last+1，然后更新last<br>当遍历完数组后，不等于val的值就都移动到了数组前端有效部分。</p></blockquote><p>但是这样会移动大量的元素，考虑是不是可以只移动值等于val的元素，由于数组的顺序可以改变，那么我们可以:</p><blockquote><p>将等于val的元素与最后一个值不等于val的元素交换</p></blockquote><p>这样当遍历完成后，所有等于val的值都被移动到了数组末尾无效部分。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.empty())    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> last=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.size();j++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[j]!=val)    nums[last++]=nums[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.empty())    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt;= end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] == val)</div><div class="line">            &#123;</div><div class="line">                nums[i] = nums[end--];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ++end;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;strong&gt;nums&lt;/strong&gt; and a value &lt;strong&gt;val&lt;/strong&gt;, remove all instances of that value in-place and return the new length.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--26. Remove Duplicates from Sorted Array</title>
    <link href="http://wuyujie.top/2019/04/17/LeetCode-26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://wuyujie.top/2019/04/17/LeetCode-26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2019-04-17T07:25:04.000Z</published>
    <updated>2019-04-17T08:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a sorted array nums, remove the duplicates <strong>in-place</strong> such that each element appear only once and return the new length.<br><a id="more"></a><br>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Given nums = [1,1,2],</p><p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</p><p>It doesn’t matter what you leave beyond the returned length.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Given nums = [0,0,1,1,1,2,2,3,3,4],</p><p>Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</p><p>It doesn’t matter what values are set beyond the returned length.</p></blockquote><p><strong>Clarification :</strong></p><blockquote><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// nums is passed in by reference. (i.e., without making a copy)</div><div class="line">int len = removeDuplicates(nums);</div><div class="line"></div><div class="line">// any modification to nums in your function would be known by the caller.</div><div class="line">// using the length returned by your function, it prints the first len elements.</div><div class="line">for (int i = 0; i &lt; len; i++) &#123;</div><div class="line">    print(nums[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题要求去除数字中的冗余项，而且只能使用O(1)的空间复杂度。看题目说明得知，我们返回的是处理后数组的长度，我们只需要保证数组前面有效部分的值，至于超出有效部分的值我们无需关心。</p><p>那么就可以很好处理，我们继续下当前最后一个有效位的位置，等到下一次遇到不重复的数时，将该数字移动到下一个有效位，然后更新有效位继续扫描数组。当完成一遍扫描后，所有不重复的值都移动到了数组的前端有效部分。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> last=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] != nums[last<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                nums[last] = nums[i];</div><div class="line">                last++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a sorted array nums, remove the duplicates &lt;strong&gt;in-place&lt;/strong&gt; such that each element appear only once and return the new length.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--25. Reverse Nodes in k-Group</title>
    <link href="http://wuyujie.top/2019/04/16/LeetCode-25-Reverse-Nodes-in-k-Group/"/>
    <id>http://wuyujie.top/2019/04/16/LeetCode-25-Reverse-Nodes-in-k-Group/</id>
    <published>2019-04-16T07:13:58.000Z</published>
    <updated>2019-04-16T07:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.<br><a id="more"></a><br>k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given this linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5</p><p>For k = 2, you should return: 2-&gt;1-&gt;4-&gt;3-&gt;5</p><p>For k = 3, you should return: 3-&gt;2-&gt;1-&gt;4-&gt;5</p></blockquote><p><strong>Note :</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题又是对上一题的推广，leetcode这种由简入难的题挺多的。这次是要求对链表的K个结点反转，这里的K可以是任意的。我们可以依旧按照上一题的那种方式，将链表分为若干段：每次从链表上“摘下”k个结点的链表，把这个链表进行反转后，再放回原来的位置。对于链表的反转操作，我们可以利用构建链表时用的头插法来进行。这里在解决时碰到几个问题：</p><blockquote><ol><li>若剩下链表长度不够K时，我们不需要对这段链表进行反转，所以我们需要提前计算出链表的长度</li><li>需要记录下反转后的最后一个结点，用于在放回原链表时，可以和下一段连接起来。</li></ol></blockquote><p>还有一种方法，实现如下，这种方法思想上大致相同，这种方法不用单独计算链表长度，而是边计算长度边处理链表，每当数到k个结点时就反转一次。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        dummy.next = <span class="literal">NULL</span>;</div><div class="line">        ListNode* count = head;</div><div class="line">        <span class="keyword">int</span> Len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(count)</div><div class="line">        &#123;</div><div class="line">            count=count-&gt;next;</div><div class="line">            Len++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode* pre = &amp;dummy;</div><div class="line">        ListNode* last = head;</div><div class="line">        ListNode* temp = last;</div><div class="line">        ListNode* next;</div><div class="line">        <span class="keyword">while</span>(Len &gt;= k)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//下一个待取的结点</span></div><div class="line">                next = temp-&gt;next;</div><div class="line">                <span class="comment">//插入头部</span></div><div class="line">                temp-&gt;next = pre-&gt;next;</div><div class="line">                pre-&gt;next = temp;</div><div class="line">                temp = next;</div><div class="line">            &#125;</div><div class="line">            pre = last;last=next;</div><div class="line">            Len-=k;</div><div class="line">        &#125;</div><div class="line">        pre-&gt;next = last;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!head || k == <span class="number">1</span>) <span class="keyword">return</span> head;</div><div class="line">        ListNode *dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *pre = dummy, *cur = head;</div><div class="line">        dummy-&gt;next = head;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; cur; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (i % k == <span class="number">0</span>) &#123;</div><div class="line">                pre = reverseOneGroup(pre, cur-&gt;next);</div><div class="line">                cur = pre-&gt;next;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                cur = cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="function">ListNode* <span class="title">reverseOneGroup</span><span class="params">(ListNode* pre, ListNode* next)</span> </span>&#123;</div><div class="line">        ListNode *last = pre-&gt;next, *cur = last-&gt;next;</div><div class="line">        <span class="keyword">while</span>(cur != next) &#123;</div><div class="line">            last-&gt;next = cur-&gt;next;</div><div class="line">            cur-&gt;next = pre-&gt;next;</div><div class="line">            pre-&gt;next = cur;</div><div class="line">            cur = last-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--24. Swap Nodes in Pairs</title>
    <link href="http://wuyujie.top/2019/04/16/LeetCode-24-Swap-Nodes-in-Pairs/"/>
    <id>http://wuyujie.top/2019/04/16/LeetCode-24-Swap-Nodes-in-Pairs/</id>
    <published>2019-04-16T06:42:08.000Z</published>
    <updated>2019-04-16T07:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a linked list, swap every two adjacent nodes and return its head.<br><a id="more"></a><br>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>要求交换链表中相邻两个结点的位置，并且要求不能修改结点的值，也就是只能将结点整个交换过去。我的思路很简单，从链表上依次“摘下”两个结点，交换其位置后再将得到的结果拼接回链表，题目并不难，主要是对链表的操作。可以按下面的图来表示(图参考自<a href="https://leetcode.com/problems/swap-nodes-in-pairs/discuss/11183/C%2B%2B-solution-with-graph-explanation." title="C++ solution with graph explanation." target="_blank" rel="external">C++ solution with graph explanation.</a>)<br>/*</p><pre><code>   node1 = pre-&gt;next;node2 = node1-&gt;next   #----&gt;@----&gt;@----&gt;@----&gt;@----&gt;@----&gt;@               ^     ^     ^               pre   node1 node2  1. pre-&gt;next = node2                __________               /          \   #----&gt;@----&gt;@     @----&gt;@----&gt;@----&gt;@               ^     ^     ^               pre   node1 node2  2. node1-&gt;next = node2-&gt;next                __________               /          \   #----&gt;@----&gt;@     @     @----&gt;@----&gt;@                      \_________/               ^     ^     ^               pre   node1 node2  3. node2-&gt;next = node1               __________              /          \  #----&gt;@----&gt;@     @&lt;----@     @----&gt;@                     \_________/              ^     ^     ^              pre   node1 node2  4. pre = node1;               __________              /          \  #----&gt;@----&gt;@     @&lt;----@     @----&gt;@                     \_________/                    ^                    pre</code></pre><p> */</p><p>同样的思想也可以用递归来实现</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        dummy.next = head;</div><div class="line">        ListNode *pre = &amp;dummy;</div><div class="line">        ListNode *node1,*node2;</div><div class="line">        <span class="keyword">while</span>(pre)</div><div class="line">        &#123;</div><div class="line">            node1 = pre-&gt;next;</div><div class="line">            <span class="keyword">if</span>(node1&amp;&amp;node1-&gt;next)</div><div class="line">            &#123;</div><div class="line">                node2 = node1-&gt;next;</div><div class="line">                pre-&gt;next = node2;</div><div class="line">                node1-&gt;next = node2-&gt;next;</div><div class="line">                node2-&gt;next = node1;</div><div class="line">            &#125;</div><div class="line">            pre = node1;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!head || !(head-&gt;next))</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        ListNode *res = head-&gt;next;</div><div class="line">        head-&gt;next = swapPairs(res-&gt;next);</div><div class="line">        res-&gt;next = head;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--23. Merge k Sorted Lists</title>
    <link href="http://wuyujie.top/2019/04/16/LeetCode-23-Merge-k-Sorted-Lists/"/>
    <id>http://wuyujie.top/2019/04/16/LeetCode-23-Merge-k-Sorted-Lists/</id>
    <published>2019-04-16T05:28:44.000Z</published>
    <updated>2019-04-16T06:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.<br><a id="more"></a></p></blockquote><p><strong>Example :</strong></p><blockquote><p>Input:<br>[<br> 1-&gt;4-&gt;5,<br> 1-&gt;3-&gt;4,<br> 2-&gt;6<br>]<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>前面有一题是合并两个有序的链表，这道题就相当于进一步泛化。</p><p>考虑到我们已经有了合并两个链表的方法，那么我们就可以把这个问题分解。每次把链表数组中的两个链表合并，直到只剩下一个链表为之。这时这个剩下的链表就是我们需要的结果。实现后的确解决了问题，但是效率不高。</p><p>进一步思考，既然合并链表的过程都是类似的，那么是不是可以用分治来做，将合并K个链表分解为合并两个子问题的结果——合并K/2个链表。这样逐步分解下去，可以划分为许多更容易解决的子问题。结合递归实现后，效率得到了极大提升，分治算法的思想果然厉害。细想起来，归并排序的思想似乎也是这样。</p><p>在题解中发现还有一种有意思的解法，使用priority_queue求解。由priority_queue的特性，我们可以设置在队列头部总是一个值最小的结点，那么我们就可以把所有链表第一个结点输入这个队列中。每次从队列得到最小的结点放入新链表，将该节点对应链表的下一个结点放入队列。这个重复不断进行，最终可以得到一个新的有序链表。这时候的priority_queue其实相当于一个小顶堆。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="逐一合并"><a href="#逐一合并" class="headerlink" title="逐一合并"></a>逐一合并</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(INT_MIN)</span></span>;</div><div class="line">        ListNode *tail = &amp;dummy;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            tail = tail-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tail-&gt;next = l1 ? l1 : l2;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</div><div class="line">        ListNode* newList = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(lists.size() &gt;= <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(lists.size() == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                newList = lists.back();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ListNode* list1 = lists.back();</div><div class="line">                lists.pop_back();</div><div class="line">                ListNode* list2 = lists.back();</div><div class="line">                lists.pop_back();</div><div class="line">                newList = mergeTwoLists(list1,list2);</div><div class="line">                lists.push_back(newList);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> newList;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(INT_MIN)</span></span>;</div><div class="line">        ListNode *tail = &amp;dummy;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123;</div><div class="line">                tail-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            tail = tail-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tail-&gt;next = l1 ? l1 : l2;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">ListNode* <span class="title">mergeKL</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(end - begin == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> mergeTwoLists(lists[begin],lists[end]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(end == begin) <span class="keyword">return</span> lists[begin];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(end &lt; begin) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (begin+end)/<span class="number">2</span>;</div><div class="line">            ListNode* list1 = mergeKL(lists, begin, mid);</div><div class="line">            ListNode* list2 = mergeKL(lists, mid+<span class="number">1</span>, end);</div><div class="line">            <span class="keyword">return</span> mergeTwoLists(list1, list2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mergeKL(lists, <span class="number">0</span>, lists.size()<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="priority-queue解法"><a href="#priority-queue解法" class="headerlink" title="priority_queue解法"></a>priority_queue解法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</div><div class="line">        auto cmp=[](ListNode* a, ListNode* b) </div><div class="line">        &#123;</div><div class="line">            return a-&gt;val &gt; b-&gt;val;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        priority_queue&lt;ListNode*,vector&lt;ListNode*&gt;,decltype(cmp)&gt; pq(cmp);</div><div class="line">        ListNode dummy(0),*p=&amp;dummy;</div><div class="line">        </div><div class="line">        for (ListNode *node:lists) if (node) pq.push(node);</div><div class="line">        </div><div class="line">        while (!pq.empty()) </div><div class="line">        &#123;</div><div class="line">            if (pq.top()-&gt;next) pq.push(pq.top()-&gt;next);</div><div class="line">            p-&gt;next=pq.top();</div><div class="line">            pq.pop();</div><div class="line">            p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--22. Generate Parentheses</title>
    <link href="http://wuyujie.top/2019/04/14/LeetCode-22-Generate-Parentheses/"/>
    <id>http://wuyujie.top/2019/04/14/LeetCode-22-Generate-Parentheses/</id>
    <published>2019-04-14T06:12:46.000Z</published>
    <updated>2019-04-14T07:07:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<br><a id="more"></a><br>For example, given n = 3, a solution set is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &quot;((()))&quot;,</div><div class="line">    &quot;(()())&quot;,</div><div class="line">    &quot;(())()&quot;,</div><div class="line">    &quot;()(())&quot;,</div><div class="line">    &quot;()()()&quot;</div><div class="line">]</div></pre></td></tr></table></figure></p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>以前做过类似的题，也就是求一组数字可以通过栈得到的所有合法排序。当时的做法是，先求出所有可能的排序，然后判断每一种排序的合法性。获取全排序可以通过函数next_permutation()做到：</p><blockquote><p>C++ STL中提供了std::next_permutation与std::prev_permutation可以获取数字或者是字符的全排列，其中std::next_permutation提供升序、std::prev_permutation提供降序。</p></blockquote><p>所以结合前面有一题判断括号是否有效。最开始的想法是将括号全排序后，找到有效的括号排列，放入结果集。遍历完所有可能后，就可以找到最终的结果了。</p><p>但是这种方法效率很低。另一种方法是，使用递归回溯，每次生成合法的括号序列加入结果集中，这种方法避免了生成无效排序。</p><blockquote><p>长度为 n 的序列就是 ‘(‘ 加上所有长度为 n-1 的序列，以及 ‘)’ 加上所有长度为 n-1 的序列。只有在保证序列仍然保持有效时才添加 ‘(‘ or ‘)’，我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点，如果我们还剩一个位置，我们可以开始放一个左括号。 如果它不超过左括号的数量，我们可以放一个右括号。</p></blockquote><p>还有一种方法，LeetCode上称之为Closure number，但感觉很像分治。我们可以把一个合法的括号字符串看做一个闭包，它必然起于左括号止于右括号，且每个合法括号串都可以从某个位置分为两个同样合法的括号串（包括空串），因此对于给定的n所可能构造的所有括号串都可以一步步划分为两个子闭包并解构（去掉头尾的一对左右括号）直到最小闭包——空串为止。基于以上分析，我们就可以从空串开始逆向一步步对两个子闭包之一构造新的闭包（在头尾各添加一个左/右括号）然后合并。这种方法还不是特别懂，只是跟着算法用c++重写了一遍。</p><p>参考文献：<br>[1] <a href="https://www.cnblogs.com/aiguona/p/7304945.html" title="C++ STL 全排列函数详解" target="_blank" rel="external">C++ STL 全排列函数详解</a><br>[2] <a href="https://blog.csdn.net/weixin_34216107/article/details/86906251" title="LeetCode Record C++" target="_blank" rel="external">LeetCode Record C++</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="全排序后筛选"><a href="#全排序后筛选" class="headerlink" title="全排序后筛选"></a>全排序后筛选</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; brackets;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">')'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'('</span>)</div><div class="line">                &#123;</div><div class="line">                    brackets.pop();</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> brackets.push(s[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(brackets.empty()) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> parentheses = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) parentheses+=<span class="string">"()"</span>;</div><div class="line">        </div><div class="line">        sort(parentheses.begin(), parentheses.end());</div><div class="line">        result.push_back(parentheses);</div><div class="line">        <span class="keyword">while</span>(next_permutation(parentheses.begin(), parentheses.end()))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(isValid(parentheses)) result.push_back(parentheses);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; result, <span class="built_in">string</span> cur, <span class="keyword">int</span> open, <span class="keyword">int</span> close, <span class="keyword">int</span> max)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(cur.length() == max*<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            result.push_back(cur);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(open &lt; max)</div><div class="line">        &#123;</div><div class="line">            backtrack(result, cur+<span class="string">"("</span>, open+<span class="number">1</span>, close, max);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(close &lt; open)</div><div class="line">        &#123;</div><div class="line">            backtrack(result, cur+<span class="string">")"</span>, open, close+<span class="number">1</span>, max);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        backtrack(result, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>, n);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="闭包数"><a href="#闭包数" class="headerlink" title="闭包数"></a>闭包数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            result.push_back(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; n; c++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> left:generateParenthesis(c))</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> right:generateParenthesis(n<span class="number">-1</span>-c))</div><div class="line">                        result.push_back(<span class="string">"("</span>+left+<span class="string">")"</span>+right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--21. Merge Two Sorted Lists</title>
    <link href="http://wuyujie.top/2019/04/14/LeetCode-21-Merge-Two-Sorted-Lists/"/>
    <id>http://wuyujie.top/2019/04/14/LeetCode-21-Merge-Two-Sorted-Lists/</id>
    <published>2019-04-14T05:49:08.000Z</published>
    <updated>2019-04-14T06:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.<br><a id="more"></a><br>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>要求合并两个有序链表，新链表是由两个链表结点拼接得到，考察的是对链表的操作。思想是，每次从两个链表上取下一个结点，比较值的大小，较小的结点拼接到新链表后，较大的结点继续进行下一次比较。</p><p>这里需要注意的是链表边界的处理，比如对链表头结点的处理方式。可以先单独处理两个链表头结点，确定下新链表的头结点后，再继续继续下面的处理。也可以重新定义一个新的头结点，把链表结点都当做普通结点处理。最后可能有一个链表还有剩余的结点，直接将这些结点拼接到新链表末尾即可。</p><p>还可以使用递归的方式求解，但是递归的缺点是，若链表过长，可能会溢出。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span> || l2 == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> l1 == <span class="literal">NULL</span>? l2 : l1;</div><div class="line">        </div><div class="line">        ListNode* resHead = l1-&gt;val &lt; l2-&gt;val?l1 : l2;</div><div class="line">        ListNode* cur = resHead;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val) l1=l1-&gt;next;</div><div class="line">        <span class="keyword">else</span> l2=l2-&gt;next;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span> &amp;&amp; l2!=<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                cur-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                cur-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            cur = cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        cur-&gt;next = l1==<span class="literal">NULL</span>?l2:l1;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> resHead;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="定义新的头结点dummy"><a href="#定义新的头结点dummy" class="headerlink" title="定义新的头结点dummy"></a>定义新的头结点dummy</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(INT_MIN)</span></span>;</div><div class="line">        ListNode *tail = &amp;dummy;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</div><div class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class="line">                tail-&gt;next = l1;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                tail-&gt;next = l2;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            tail = tail-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tail-&gt;next = l1 ? l1 : l2;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span> || l2 == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> l1 == <span class="literal">NULL</span>? l2 : l1;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</div><div class="line">            <span class="keyword">return</span> l1;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            l2-&gt;next = mergeTwoLists(l2-&gt;next, l1);</div><div class="line">            <span class="keyword">return</span> l2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--20. Valid Parentheses</title>
    <link href="http://wuyujie.top/2019/04/14/LeetCode-20-Valid-Parentheses/"/>
    <id>http://wuyujie.top/2019/04/14/LeetCode-20-Valid-Parentheses/</id>
    <published>2019-04-14T03:29:05.000Z</published>
    <updated>2019-04-14T05:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.<br><a id="more"></a><br>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: “()”<br>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: “()[]{}”<br>Output: true</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: “(]”<br>Output: false</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input: “([)]”<br>Output: false</p></blockquote><p><strong>Example 5:</strong></p><blockquote><p>Input: “{[]}”<br>Output: true</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题很经典，也就是让我们判断给定的括号字符串是不是合法的，考察的应该是栈的运用。通过栈就可以很容易的解决问题，遍历字符串：</p><blockquote><ol><li>若遍历到是左括号<code>&#39;(&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;[&#39;</code>，将其推入栈中；</li><li>若遇到的是右括号，在栈顶找是否有匹配的左括号：若匹配成功，将栈顶弹出，继续遍历；若匹配失败，代表括号不合法，返回false.</li><li>遍历完字符串后，检查栈是否为空，若不空，代表不合法。</li></ol></blockquote><p>评论区有一种不使用stack的解法，它是直接在原字符串上模拟一个栈，保证只有左括号在栈内。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="使用stack"><a href="#使用stack" class="headerlink" title="使用stack"></a>使用stack</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; brackets;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">switch</span>(s[i])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</div><div class="line">                    <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'('</span>)</div><div class="line">                    &#123;</div><div class="line">                        brackets.pop();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>:</div><div class="line">                    <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'&#123;'</span>)</div><div class="line">                    &#123;</div><div class="line">                        brackets.pop();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">']'</span>:</div><div class="line">                    <span class="keyword">if</span>(!brackets.empty() &amp;&amp; brackets.top()==<span class="string">'['</span>)</div><div class="line">                    &#123;</div><div class="line">                        brackets.pop();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    brackets.push(s[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(brackets.empty()) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="不使用stack"><a href="#不使用stack" class="headerlink" title="不使用stack"></a>不使用stack</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> top = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;s.length();++i)&#123;</div><div class="line">            <span class="keyword">if</span>(top&lt;<span class="number">0</span> || !isMatch(s[top], s[i]))&#123;</div><div class="line">                ++top;</div><div class="line">                s[top] = s[i];</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                --top;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> top == <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">char</span> c1, <span class="keyword">char</span> c2)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(c1 == <span class="string">'('</span> &amp;&amp; c2 == <span class="string">')'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(c1 == <span class="string">'['</span> &amp;&amp; c2 == <span class="string">']'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(c1 == <span class="string">'&#123;'</span> &amp;&amp; c2 == <span class="string">'&#125;'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>第三周LeetCode</title>
    <link href="http://wuyujie.top/2019/04/11/%E7%AC%AC%E4%B8%89%E5%91%A8LeetCode/"/>
    <id>http://wuyujie.top/2019/04/11/第三周LeetCode/</id>
    <published>2019-04-11T05:41:57.000Z</published>
    <updated>2019-04-18T05:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三周LeetCode刷题记录"><a href="#第三周LeetCode刷题记录" class="headerlink" title="第三周LeetCode刷题记录"></a>第三周LeetCode刷题记录</h2><a id="more"></a><ol><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-10-Regular-Expression-Matching/" title="LeetCode--10. Regular Expression Matching" target="_blank" rel="external">LeetCode—10. Regular Expression Matching</a></li><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-13-Roman-to-Integer/" title="LeetCode--13. Roman to Integer" target="_blank" rel="external">LeetCode—13. Roman to Integer</a></li><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-14-Longest-Common-Prefix/" title="LeetCode--14. Longest Common Prefix" target="_blank" rel="external">LeetCode—14. Longest Common Prefix</a></li><li><a href="http://wuyunjie.top/2019/04/07/LeetCode-15-3Sum/" title="LeetCode--15. 3Sum" target="_blank" rel="external">LeetCode—15. 3Sum</a></li><li><a href="http://wuyunjie.top/2019/04/09/LeetCode-16-3Sum-Closest/" title="LeetCode--16. 3Sum Closest" target="_blank" rel="external">LeetCode—16. 3Sum Closest</a></li><li><a href="http://wuyunjie.top/2019/04/10/LeetCode-17-Letter-Combinations-of-a-Phone-Number/" title="LeetCode--17. Letter Combinations of a Phone Number" target="_blank" rel="external">LeetCode—17. Letter Combinations of a Phone Number</a></li><li><a href="http://wuyunjie.top/2019/04/10/LeetCode-18-4Sum/" title="LeetCode--18. 4Sum" target="_blank" rel="external">LeetCode—18. 4Sum</a></li><li><a href="http://wuyunjie.top/2019/04/11/LeetCode-19-Remove-Nth-Node-From-End-of-List/" title="LeetCode--19. Remove Nth Node From End of List" target="_blank" rel="external">LeetCode—19. Remove Nth Node From End of List</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第三周LeetCode刷题记录&quot;&gt;&lt;a href=&quot;#第三周LeetCode刷题记录&quot; class=&quot;headerlink&quot; title=&quot;第三周LeetCode刷题记录&quot;&gt;&lt;/a&gt;第三周LeetCode刷题记录&lt;/h2&gt;
    
    </summary>
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/categories/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="LeetCode报告" scheme="http://wuyujie.top/tags/LeetCode%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--19. Remove Nth Node From End of List</title>
    <link href="http://wuyujie.top/2019/04/11/LeetCode-19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://wuyujie.top/2019/04/11/LeetCode-19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2019-04-11T05:12:20.000Z</published>
    <updated>2019-04-11T05:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a linked list, remove the n-th node from the end of list and return its head.<br><a id="more"></a></p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p><p>After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5</p></blockquote><p><strong>Note :</strong></p><blockquote><p>Given n will always be valid.</p></blockquote><p><strong>Follow up :</strong></p><blockquote><p>Could you do this in one pass?</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目要求我们找到并删除链表的倒数第n个数。由于链表不支持随机访问，并且链表长度也不容易求，所以题目看似会很麻烦。但是以前经常会碰到这样的问题，比如求链表中间位置的数等等，对这类题目有过一定了解。其实很简单，只需要用两个指针就可实现一次扫描得到结果。</p><blockquote><p>首先第一个指针end先前进n，到达第n个结点后，第二个结点pre开始前进遍历；<br>两个指针end和pre同步前进，他们之间的距离是n，当end到达链表尾部时，pre指向的就是倒数第n个结点。<br>此时我们可以继续操作，进行要求的插入，删除等等。</p></blockquote><p>在寻找链表中点时，可以使用同样的方法。使用两个指针end,mid，两个指针同时前进，但此时，mid每前进一步，end会前进两步。那么当end到达终点时，mid恰好走过一半的结点，也就找到了链表的中点。</p><p>当然还有一种暴力解法，就是先计算出链表的长度L，然后找到第(L-n)个结点，把第 (L−n) 个结点的 next 指针重新链接至第 (L−n+2) 个结点。同样可以完成该算法。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        ListNode *end = head;</div><div class="line">        ListNode *pre = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) end = end-&gt;next;</div><div class="line">        <span class="keyword">if</span>(end == <span class="literal">NULL</span>) <span class="keyword">return</span> head-&gt;next;</div><div class="line">        <span class="keyword">while</span>(end-&gt;next!=<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            end = end-&gt;next;</div><div class="line">            pre = pre-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode *temp = pre-&gt;next;</div><div class="line">        pre-&gt;next = temp-&gt;next;</div><div class="line">        <span class="keyword">delete</span> temp;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="暴力算法"><a href="#暴力算法" class="headerlink" title="暴力算法"></a>暴力算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        ListNode *count = head;</div><div class="line">        ListNode *pre = head;</div><div class="line">        <span class="keyword">int</span> L = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(count!=<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            L++;</div><div class="line">            count=count-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> Lmn = L - n;</div><div class="line">        <span class="keyword">if</span>(Lmn == <span class="number">0</span>) <span class="keyword">return</span> head-&gt;next;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; Lmn<span class="number">-1</span>; i++)</div><div class="line">        &#123;</div><div class="line">            pre = pre-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode *temp = pre-&gt;next;</div><div class="line">        pre-&gt;next = temp-&gt;next;</div><div class="line">        <span class="keyword">delete</span> temp;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, remove the n-th node from the end of list and return its head.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--18. 4Sum</title>
    <link href="http://wuyujie.top/2019/04/10/LeetCode-18-4Sum/"/>
    <id>http://wuyujie.top/2019/04/10/LeetCode-18-4Sum/</id>
    <published>2019-04-10T08:56:21.000Z</published>
    <updated>2019-04-10T10:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given an array <code>nums</code> of n integers and an integer <code>target</code>, are there elements a, b, c, and d in <code>nums</code> such that a + b + c + d = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.<br><a id="more"></a></p></blockquote><p><strong>Note :</strong></p><blockquote><p>The solution set must not contain duplicate quadruplets.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.</p><p>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题和前面几道关于数字之和的题应该是同一个系列(<a href="http://wuyunjie.top/2019/03/28/LeetCode%E2%80%94%E2%80%941-Two-Sum/" title="Two Sum" target="_blank" rel="external">Two Sum</a>，<a href="http://wuyunjie.top/2019/04/07/LeetCode-15-3Sum/" title="3Sum" target="_blank" rel="external">3Sum</a>，<a href="http://wuyunjie.top/2019/04/09/LeetCode-16-3Sum-Closest/" title="3Sum Closest" target="_blank" rel="external">3Sum Closest</a>)。尽管难度有所提升，但是解题的思想和算法实际上都一致，其实也就是多了层循环。比如四个数a,b,c,d，我们可以先固定数a，然后寻找b,c,d，这就转换成了三数和的问题。</p><p>现在遇到了许多类似的问题，而且可以看出他们的解决方法具有一定规律，可以进行拓展。那么是不是可以找到一种泛化的方法计算KSUM，使得我们以后遇到5sum, 6sum…等等类似的问题时，不必再去重写这些算法，只用一个泛化的算法就可以搞定这一些。翻看评论区后，发现已经有人实现了这样的算法，主要是通过递归DFS实现的。每次先固定一个数，然后递归找到K-1SUM的结果。依次类推，直到找到2SUM返回最终结果，开始回溯。代码实现如下。</p><p>参考文献：<br><a href="https://leetcode.com/problems/4sum/discuss/8641/12ms-KSum-c%2B%2B-code" title="12ms KSum, c++ code" target="_blank" rel="external">[1] 12ms KSum, c++ code</a><br><a href="https://leetcode.com/problems/4sum/discuss/163559/C%2B%2B-solution-for-all-Ksum-question" title="[1] C++ solution for all Ksum question" target="_blank" rel="external">[2] C++ solution for all Ksum question</a></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="4SUM"><a href="#4SUM" class="headerlink" title="4SUM"></a>4SUM</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">if</span>(nums.size() &lt;= <span class="number">3</span> || (nums.front() &gt; target &amp;&amp; nums.front() &gt; <span class="number">0</span>) || (nums.back() &lt; target &amp;&amp; nums.back() &lt; <span class="number">0</span>))</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> n = nums.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">3</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[i+<span class="number">1</span>]+nums[i+<span class="number">2</span>]+nums[i+<span class="number">3</span>]&gt;target) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[n<span class="number">-3</span>]+nums[n<span class="number">-2</span>]+nums[n<span class="number">-1</span>]&lt;target) <span class="keyword">continue</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> tmp_target = target - nums[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n <span class="number">-2</span>  ; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[j+<span class="number">1</span>]+nums[j+<span class="number">2</span>]&gt;target) <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[n<span class="number">-2</span>]+nums[n<span class="number">-1</span>]&lt;target) <span class="keyword">continue</span>;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> low = j+<span class="number">1</span>,high = n<span class="number">-1</span>;</div><div class="line">                </div><div class="line">                <span class="keyword">while</span>( low &lt; high)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> sum = nums[j] + nums[low] + nums[high];</div><div class="line">                    <span class="keyword">if</span>(sum == tmp_target)</div><div class="line">                    &#123;</div><div class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tuple = &#123;nums[i], nums[j], nums[low], nums[high]&#125;;</div><div class="line">                        res.push_back(tuple);</div><div class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] == nums[++low] );</div><div class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] == nums[--high] );</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; tmp_target) high--;</div><div class="line">                    <span class="keyword">else</span> low++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="KSUM"><a href="#KSUM" class="headerlink" title="KSUM"></a>KSUM</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// Valid for K &gt;= 2</span></div><div class="line">    <span class="comment">// k表示求ksum,nums是目标数组,l,r分别是左右游标</span></div><div class="line">    <span class="comment">// target是当前目标数, retVal是最终结果, cur是当前阶段的中间结果</span></div><div class="line">    <span class="comment">// ci表示当前是正在求第ci个数</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">KSum</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; retVal, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cur, <span class="keyword">int</span> ci )</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mn, mx; <span class="comment">//mn表示当前最小的数，mx表示当前最大的数</span></div><div class="line">        <span class="keyword">int</span> km1 = k - <span class="number">1</span>; </div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( r-l+<span class="number">1</span> &lt; k ) <span class="keyword">return</span>; <span class="comment">//若剩余的数比K小，已经无法找到结果，结束递归</span></div><div class="line">        </div><div class="line">        <span class="keyword">while</span> ( l &lt; r )</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//更新当前最小数和最大数</span></div><div class="line">            mn = nums[l];</div><div class="line">            mx = nums[r];</div><div class="line">            </div><div class="line">            <span class="comment">// 若mn + (k-1)*mx &lt; target，mn太小，l右移</span></div><div class="line">            <span class="keyword">if</span> ( ( mn + km1*mx ) &lt; target ) l++;</div><div class="line">            <span class="comment">// 若(k-1)*mn + mx &gt; target，mx太大，r左移</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( ( km1*mn + mx ) &gt; target ) r--;</div><div class="line">            </div><div class="line">            <span class="comment">// K=2,直接求出最终结果，其中包括去重操作</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( k == <span class="number">2</span> )</div><div class="line">            &#123;</div><div class="line">                cur[ci] = mn;</div><div class="line">                cur[ci+<span class="number">1</span>] = mx;</div><div class="line">                retVal.push_back( cur );</div><div class="line">                l++;</div><div class="line">                <span class="keyword">while</span> ( ( l &lt; r ) &amp;&amp; ( nums[l] == mn ) ) l++;</div><div class="line">                r--;</div><div class="line">                <span class="keyword">while</span> ( ( l &lt; r ) &amp;&amp; ( nums[r] == mx ) ) r--;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 否者，递归转化为k-1 Sum的问题，递归求解</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                cur[ci] = mn; <span class="comment">//记录下当前可能的第ci个数</span></div><div class="line">                <span class="comment">//递归求解k-1 Sum</span></div><div class="line">                KSum( km1, nums, ++l, r, target - mn, retVal, cur, ci+<span class="number">1</span> );</div><div class="line">                <span class="comment">// 去重</span></div><div class="line">                <span class="keyword">while</span> ( ( l &lt; r ) &amp;&amp; ( nums[l] == nums[l<span class="number">-1</span>] ) ) l++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; RetVal;</div><div class="line">        <span class="comment">//初始化中间结果向量</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur(<span class="number">4</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 排序，用于后面去重</span></div><div class="line">        sort( nums.begin(), nums.end() );</div><div class="line">        </div><div class="line">        KSum( <span class="number">4</span>, nums, <span class="number">0</span>, nums.size()<span class="number">-1</span>, target, RetVal, cur, <span class="number">0</span> );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> RetVal;        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of n integers and an integer &lt;code&gt;target&lt;/code&gt;, are there elements a, b, c, and d in &lt;code&gt;nums&lt;/code&gt; such that a + b + c + d = &lt;code&gt;target&lt;/code&gt;? Find all unique quadruplets in the array which gives the sum of &lt;code&gt;target&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--17. Letter Combinations of a Phone Number</title>
    <link href="http://wuyujie.top/2019/04/10/LeetCode-17-Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://wuyujie.top/2019/04/10/LeetCode-17-Letter-Combinations-of-a-Phone-Number/</id>
    <published>2019-04-10T07:37:42.000Z</published>
    <updated>2019-04-10T08:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.<br><a id="more"></a><br>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p><p><strong>Example :</strong></p><blockquote><p>Input: “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p></blockquote><p><strong>Note :</strong></p><blockquote><p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目让模拟手机9键的键盘，给定一个数字字符串(代表按键顺序)，给出可能的所有字母组合。简单理解，就是求每个数字所代表的字符集合的笛卡尔积，找出所有可能的情况。</p><p>想法是先在一个vector数组内放入一个空字符””。之后扫描字符串，每次识别到一个数字，就将这个数字所对应的字符分别与vector数组内的字符串连接加入数组，然后删去连接前的旧字符串，继续下一次扫描。当扫描完数字字符串时，就可以成功得到结果了。除此之外还有其他方法：</p><blockquote><p><strong>回溯法(Backtracking)</strong><br>回溯法是寻找所有可能的候选结果的一种算法。定义一个回溯函数<code>backtrack(combination, next_digits)</code>，生成结果并逐个字符检查。</p><ul><li>若已经没有digits需要继续处理，说明结果已经成功生成，存入结果集。</li><li>如果仍然有还未检查的digits字符，继续处理该字符：<ul><li>将该字符代表的字母加入当前生成的结果 <code>combination = combination + letter</code></li><li>继续处理剩余的字符：<code>backtrack(combination + letter, next_digits[1:])</code></li></ul></li></ul></blockquote><p><a href="https://imgchr.com/i/AT0u8J" target="_blank" rel="external"><img src="https://s2.ax1x.com/2019/04/10/AT0u8J.png" alt="AT0u8J.png"></a></p><blockquote><p>这是一种递归迭代的方法。方法思想差不多，只是这种方法用递归实现。</p><p>其中还可以继续优化的是，可以不使用unordered_map，直接用一个一维string数组来存储mapping数组。</p></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; mapping = &#123;</div><div class="line">        &#123;<span class="string">'1'</span>,<span class="string">""</span>&#125;, &#123;<span class="string">'2'</span>,<span class="string">"abc"</span>&#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,</div><div class="line">        &#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;, &#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,&#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,</div><div class="line">        &#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;, &#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</div><div class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res(<span class="number">1</span>,<span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; digits.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res_length = res.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mapping[digits[i]].length();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; res_length;k++)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(res[k]+mapping[digits[i]][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            res.erase(res.begin(),res.begin()+res_length);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; mapping = &#123;</div><div class="line">        &#123;<span class="string">'1'</span>,<span class="string">""</span>&#125;, &#123;<span class="string">'2'</span>,<span class="string">"abc"</span>&#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,</div><div class="line">        &#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;, &#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,&#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,</div><div class="line">        &#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;, &#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="built_in">string</span> combination, <span class="built_in">string</span> digits)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.push_back(combination);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> letters = mapping[digits[<span class="number">0</span>]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;letters.length();i++)</div><div class="line">            &#123;</div><div class="line">                backtrack(combination+letters[i], digits.substr(<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</div><div class="line">        <span class="keyword">if</span>(digits.length() != <span class="number">0</span>) </div><div class="line">            backtrack(<span class="string">""</span>, digits);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="方法三-不使用unordered-map"><a href="#方法三-不使用unordered-map" class="headerlink" title="方法三(不使用unordered_map)"></a>方法三(不使用unordered_map)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">string</span> mapping[<span class="number">10</span>] = &#123;<span class="string">""</span>, <span class="string">""</span>, <span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</div><div class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res(<span class="number">1</span>,<span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; digits.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> res_length = res.size();</div><div class="line">            <span class="built_in">string</span> letters = mapping[digits[i]-<span class="string">'0'</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; letters.length();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; res_length;k++)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(res[k]+letters[j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            res.erase(res.begin(),res.begin()+res_length);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string containing digits from &lt;code&gt;2-9&lt;/code&gt; inclusive, return all possible letter combinations that the number could represent.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--16. 3Sum Closest</title>
    <link href="http://wuyujie.top/2019/04/09/LeetCode-16-3Sum-Closest/"/>
    <id>http://wuyujie.top/2019/04/09/LeetCode-16-3Sum-Closest/</id>
    <published>2019-04-09T13:56:24.000Z</published>
    <updated>2019-04-10T07:33:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given an array <strong>nums</strong> of n integers and an integer <strong>target</strong>, find three integers in <strong>nums</strong> such that the sum is closest to <strong>target</strong>. Return the sum of the three integers. You may assume that each input would have exactly one solution.<br><a id="more"></a></p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given array nums = [-1, 2, 1, -4], and target = 1.</p><p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这个题和它的前一道题<a href="http://wuyunjie.top/2019/04/07/LeetCode-15-3Sum/" title="15. 3Sum" target="_blank" rel="external">15. 3Sum</a>很像，前一道题可以看做本题在target = 0时的特殊情况。但这道题进行了一定的改写和简化：</p><blockquote><ol><li>存在且仅存在一个解，所以我们可以在找到一个最优解后立即停止;</li><li>要寻找的是最接近target的三数和。也就是说可能会没有等于target的情况，比如题目的例子就是如此；另一方面只需要返回这三个数的和，不需要记录这三个数，所以对结果的记录和判断简化了。</li></ol></blockquote><p>我们只需要在15题的算法的基础上进行一定的修改就可以得到这道题的结果了。我们可以用同样的方法，先对数组进行排序，固定一个数a，然后去找另外两个数b和c的组合：</p><ol><li>如果我们只要找到两个数且和(b+c)为(target - a)，那么找到了最接近的三数和即target;</li><li>否者我们记录下当前数以及与target的距离(定义为|target-(a+b+c)|)，继续遍历数组找下一个更相近的三数和。</li></ol><p>同样的，在寻找过程中，我们可以跳过那些重复的组合，并且进行合适的剪枝进行优化。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        <span class="keyword">int</span> res = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[nums.size()<span class="number">-1</span>];</div><div class="line">        <span class="keyword">int</span> closesetDistance = <span class="built_in">abs</span>(nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[nums.size()<span class="number">-1</span>] - target);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() ; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> low = i+<span class="number">1</span>,high = nums.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(low &lt; high)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[low] + nums[high];</div><div class="line">                <span class="keyword">if</span>(sum == target)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> target;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(sum-target &lt; closesetDistance)</div><div class="line">                    &#123;</div><div class="line">                        closesetDistance = sum-target;</div><div class="line">                        res = sum;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] == nums[--high]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target-sum &lt; closesetDistance)</div><div class="line">                    &#123;</div><div class="line">                        closesetDistance = target-sum;</div><div class="line">                        res = sum;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] == nums[++low]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;strong&gt;nums&lt;/strong&gt; of n integers and an integer &lt;strong&gt;target&lt;/strong&gt;, find three integers in &lt;strong&gt;nums&lt;/strong&gt; such that the sum is closest to &lt;strong&gt;target&lt;/strong&gt;. Return the sum of the three integers. You may assume that each input would have exactly one solution.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--15. 3Sum</title>
    <link href="http://wuyujie.top/2019/04/07/LeetCode-15-3Sum/"/>
    <id>http://wuyujie.top/2019/04/07/LeetCode-15-3Sum/</id>
    <published>2019-04-07T11:41:46.000Z</published>
    <updated>2019-04-07T12:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Given an array <strong>nums</strong> of n integers, are there elements a, b, c in <strong>nums</strong> such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br><a id="more"></a></p></blockquote><p><strong>Note :</strong></p><blockquote><p>The solution set must not contain duplicate triplets.</p></blockquote><p><strong>Example :</strong></p><blockquote><p>Given array nums = [-1, 0, 1, 2, -1, -4],</p><p>A solution set is:<br>[<br> [-1, 0, 1],<br> [-1, -1, 2]<br>]</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这个题和第一题Two Sum有些类似，但是要比那道题复杂一些。它的结果不止一个，而且返回的结果里不能有重复的解，由于用向量保存解，可能同一个解有不同的排列方式，去重的话会很麻烦。需要想一种算法，在计算结果的同时，跳过重复解。所以这道题应该不是考察Two Sum的解法。</p><p>分析一下这道题的特点，要我们找出三个数且和为0，那么除了三个数全是0的情况之外，肯定会有负数和正数。我们可以先固定一个数a，然后去找另外两个数b和c，我们只要找到两个数且和(b+c)为第一个数a的相反数就行了。在寻找这两个数组合的过程中，我们肯定不希望遍历所有两个数的组合。最先想到的就是，对原数组先进行一个排序，然后遍历这个排序后的数组，寻找合适的解。主要过程大致如下：</p><blockquote><ol><li>设置low, high，分别从左边和右边向中间遍历数组:如果找到了 a+b+c=0，把结果放入答案集内;若a+b+c &lt; 0，则(b+c)过小，增大low；若a+b+c &gt; 0，则(b+c)过大，减小high</li><li>在遍历过程中，若两个数相同，在数组中一定是相邻的，可以跳过这些相同的数。</li><li>我们也可以先做个剪枝优化，就是当遍历到正数a的时候就break，因为我们的数组现在是有序的了，如果第一个要数a就是正数了，那么后面的数字b,c就都是正数，就永远不会出现和为0的情况了。</li></ol></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        <span class="keyword">if</span>(nums.size() &lt;= <span class="number">2</span> || nums.front()&gt;<span class="number">0</span> || nums.back() &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() ; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> low = i+<span class="number">1</span>,high = nums.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(low &lt; high)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[low] + nums[high];</div><div class="line">                <span class="keyword">if</span>(sum == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tuple = &#123;nums[i], nums[low], nums[high]&#125;;</div><div class="line">                    res.push_back(tuple);</div><div class="line">                    <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] == nums[++low] );</div><div class="line">                    <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] == nums[--high] );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; <span class="number">0</span>) high--;</div><div class="line">                <span class="keyword">else</span> low++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;strong&gt;nums&lt;/strong&gt; of n integers, are there elements a, b, c in &lt;strong&gt;nums&lt;/strong&gt; such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--14. Longest Common Prefix</title>
    <link href="http://wuyujie.top/2019/04/07/LeetCode-14-Longest-Common-Prefix/"/>
    <id>http://wuyujie.top/2019/04/07/LeetCode-14-Longest-Common-Prefix/</id>
    <published>2019-04-07T08:27:17.000Z</published>
    <updated>2019-04-07T09:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Write a function to find the longest common prefix string amongst an array of strings.<br><a id="more"></a><br>If there is no common prefix, return an empty string “”.</p></blockquote><p><strong>Example 1:</strong></p><blockquote><p>Input: [“flower”,”flow”,”flight”]<br>Output: “fl”</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: [“dog”,”racecar”,”car”]<br>Output: “”<br>Explanation: There is no common prefix among the input strings.</p></blockquote><p><strong>Note :</strong></p><blockquote><p>All given inputs are in lowercase letters <strong>a-z</strong>.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>题目很简单，求一组字符串的最长公共前缀。因为是公共前缀，所以必定所有字符串都包含这个前缀。想法是用一个字符串LCP保存已经比较过的字符串的公共前缀，然后逐个遍历修正这个公共前缀，最终就可以得到结果。</p><p>看了题解后，发现这种方法叫做水平扫描法，除了这种方法外，还有许多其他方法可以求解。</p><p>算法二： 垂直扫描法</p><blockquote><p>若数组末尾有一个非常短的字符串，使用水平扫描法依旧会进行S次比较，可以对其进行优化。即从前往后扫描字符串每一列，先判断每个字符串相同列上字符是否相同。</p></blockquote><p>算法三： 分治</p><blockquote><p>使用分治的技巧，将原问题 LCP(Si…Sj) 分成两个子问题 LCP(Si…Smid) 与 LCP(Smid+1…Sj)，其中mid = (i+j)/2.用子问题的解 lcpLeft 与 lcpRight 构造原问题的解 LCP(Si…Sj)。</p></blockquote><p><img src="https://leetcode-cn.com/media/original_images/14_lcp_diviso_et_lmpera.png" alt=""></p><p>算法四：</p><blockquote><p>还有一种解法，这种方法给输入字符串数组排了个序。按字母顺序排序的话，那么有共同字母多的两个字符串会被排到一起，而跟大家相同的字母越少的字符串会被挤到首尾两端，那么如果有共同前缀的话，一定会出现在首尾两端的字符串中，所以我们只需要找首尾字母串的共同前缀即可。<br>比如例子1排序后为 [“flight”, “flow”, “flower”]，例子2排序后为 [“car”, “dog”, “racecar”]，虽然例子2没有共同前缀，但也可以认为共同前缀是空串，且出现在首尾两端的字符串中。由于是按字母顺序排的，而不是按长度，所以首尾字母的长度关系不知道，为了防止溢出错误，我们只遍历而这种较短的那个的长度，找出共同前缀返回即可。</p></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="水平扫描"><a href="#水平扫描" class="headerlink" title="水平扫描"></a>水平扫描</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(strs.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> lcp = strs[<span class="number">0</span>]; <span class="comment">//初始化公共前缀</span></div><div class="line">        </div><div class="line">        <span class="comment">//逐个遍历，不断修正</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; strs.size(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(;j &lt; lcp.length() &amp;&amp; j &lt; strs[i].length();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(lcp[j] != strs[i][j])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            lcp = lcp.substr(<span class="number">0</span>,j);</div><div class="line">            <span class="keyword">if</span>(j == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lcp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="垂直扫描"><a href="#垂直扫描" class="headerlink" title="垂直扫描"></a>垂直扫描</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(strs.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">string</span> lcp = strs[<span class="number">0</span>]; <span class="comment">//初始化公共前缀</span></div><div class="line">        </div><div class="line">        <span class="comment">//逐个遍历，不断修正</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; lcp.length(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; strs.size();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i == strs[j].size() || strs[j][i] != lcp[i])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> lcp.substr(<span class="number">0</span>,i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lcp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">commomPredix</span><span class="params">(<span class="built_in">string</span> left, <span class="built_in">string</span> right)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; left.length() &amp;&amp; i &lt; right.length(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(left[i] != right[i]) <span class="keyword">return</span> left.substr(<span class="number">0</span>, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> left.substr(<span class="number">0</span>,i);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">LCP</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l == r)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> strs[l];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</div><div class="line">            <span class="built_in">string</span> leftLCP = LCP(strs, l, mid);</div><div class="line">            <span class="built_in">string</span> rightLCP = LCP(strs, mid+<span class="number">1</span>, r);</div><div class="line">            <span class="keyword">return</span> commomPredix(leftLCP,rightLCP);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(strs.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">return</span> LCP(strs, <span class="number">0</span>, strs.size()<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="算法四"><a href="#算法四" class="headerlink" title="算法四"></a>算法四</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (strs.empty()) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        </div><div class="line">        sort(strs.begin(), strs.end());</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len = min(strs[<span class="number">0</span>].size(), strs.back().size());</div><div class="line">        <span class="keyword">while</span> (i &lt; len &amp;&amp; strs[<span class="number">0</span>][i] == strs.back()[i]) ++i;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].substr(<span class="number">0</span>, i);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--13. Roman to Integer</title>
    <link href="http://wuyujie.top/2019/04/07/LeetCode-13-Roman-to-Integer/"/>
    <id>http://wuyujie.top/2019/04/07/LeetCode-13-Roman-to-Integer/</id>
    <published>2019-04-07T08:08:41.000Z</published>
    <updated>2019-04-07T08:25:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br><a id="more"></a></p></blockquote><p>剩余部分略，描述与它前一道题<a href="http://wuyunjie.top/2019/04/03/LeetCode-12-Integer-to-Roman/" title="12. Integer to Roman" target="_blank" rel="external">12. Integer to Roman</a>大致相同</p><p><strong>Example 1:</strong></p><blockquote><p>Input: “III”<br>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: “IV”<br>Output: 4</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: “IX”<br>Output: 9</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input: “LVIII”<br>Output: 58<br>Explanation: L = 50, V= 5, III = 3.</p></blockquote><p><strong>Example 5:</strong></p><blockquote><p>Input: “MCMXCIV”<br>Output: 1994<br>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题与它前一道题恰好相反，是从罗马数变成阿拉伯数字。细心观察可以发现，罗马数字一般都是大的数字在前面，如果存在某个较小的数字在某个较大的数字前——比如”IV”，那么他们表示的是一个数字4，即 V - I 。</p><p>利用这种特性，一开始思考，是否可以设置一个优先级，来判断某个数字应该比另一个优先出现。转念一想，他们的大小就已经代表优先级了，那么处理起来就很简单了：</p><blockquote><ol><li>若一个数比它下一个数优先级高，加入该数的值；</li><li>若一个数比它下一个数优先级低，减去该数的值。</li></ol></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; roToInt = &#123;</div><div class="line">            &#123;<span class="string">'I'</span>,<span class="number">1</span>&#125;, &#123;<span class="string">'V'</span>,<span class="number">5</span>&#125;, &#123;<span class="string">'X'</span>,<span class="number">10</span>&#125;, </div><div class="line">            &#123;<span class="string">'L'</span>,<span class="number">50</span>&#125;,&#123;<span class="string">'C'</span>,<span class="number">100</span>&#125;,&#123;<span class="string">'D'</span>,<span class="number">500</span>&#125;,&#123;<span class="string">'M'</span>,<span class="number">1000</span>&#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// int roToInt[256] = &#123;0&#125;;</span></div><div class="line">        <span class="comment">// roToInt['I']=1;roToInt['V']=5;roToInt['X']=10;</span></div><div class="line">        <span class="comment">// roToInt['L']=50;roToInt['C']=100;roToInt['D']=500;roToInt['M']=1000;</span></div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.length(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(roToInt[s[i]]&lt;roToInt[s[i+<span class="number">1</span>]])</div><div class="line">            &#123;</div><div class="line">                result-=roToInt[s[i]];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                result+=roToInt[s[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wuyujie.top/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://wuyujie.top/tags/LeetCode/"/>
    
  </entry>
  
</feed>
